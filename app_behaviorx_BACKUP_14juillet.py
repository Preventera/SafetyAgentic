#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
SafetyGraph BehaviorX - VERSION FINALE CORRIG√âE
===============================================
Plateforme r√©volutionnaire de gestion HSE avec IA
Mario Plourde - 14 juillet 2025 - Preventera/GenAISafety

üéØ Fonctionnalit√©s Principales :
- üåÄ BehaviorX Standard avec workflow multi-agent
- üó∫Ô∏è Cartographie Culture SST avec visualisations avanc√©es
- üîÆ Analytics Pr√©dictifs avec ML et alertes
- üß© Pattern Recognition avec d√©tection comportementale
- üö® Anomaly Detection avec alertes temps r√©el
- ‚ö° Analytics Optimis√©s avec monitoring performance
- üìã Normes & Conformit√© avec gestion r√©glementaire
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.graph_objects as go
import plotly.express as px
from datetime import datetime, timedelta
import json
import time
import random
from dataclasses import dataclass, asdict
from typing import Dict, Any, List, Optional

# Configuration Streamlit
st.set_page_config(
    page_title="SafetyGraph BehaviorX - VERSION FINALE",
    page_icon="üéØ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS r√©volutionnaire pour interface moderne
st.markdown("""
<style>
.main-header {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1.5rem;
    border-radius: 10px;
    margin-bottom: 1rem;
    box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
    color: white;
    text-align: center;
}

.unified-dashboard {
    background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
    padding: 1rem;
    border-radius: 12px;
    margin: 1rem 0;
    color: white;
    box-shadow: 0 8px 32px rgba(245, 87, 108, 0.3);
}

.correlation-alert {
    background: linear-gradient(135deg, #4facfe 0%, #00f2fe 100%);
    padding: 1rem;
    border-radius: 12px;
    margin: 0.5rem 0;
    animation: pulse 2s infinite;
    color: white;
}

@keyframes pulse {
    0% { transform: scale(1); }
    50% { transform: scale(1.02); }
    100% { transform: scale(1); }
}

.revolution-badge {
    position: fixed;
    top: 10px;
    right: 10px;
    background: linear-gradient(45deg, #ff6b6b, #ffa500);
    color: white;
    padding: 0.8rem 1.5rem;
    border-radius: 25px;
    z-index: 1000;
    animation: bounce 2s infinite;
    font-weight: bold;
}

@keyframes bounce {
    0%, 20%, 50%, 80%, 100% { transform: translateY(0); }
    40% { transform: translateY(-10px); }
    60% { transform: translateY(-5px); }
}

.validation-success {
    background: linear-gradient(135deg, #56ab2f 0%, #a8e6cf 100%);
    padding: 1rem;
    border-radius: 10px;
    margin: 0.5rem 0;
    color: white;
    font-weight: bold;
}

.validation-warning {
    background: linear-gradient(135deg, #f7b733 0%, #fc4a1a 100%);
    padding: 1rem;
    border-radius: 10px;
    margin: 0.5rem 0;
    color: white;
    font-weight: bold;
}

.enhanced-metric {
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    padding: 1rem;
    border-radius: 10px;
    margin: 0.5rem;
    color: white;
    box-shadow: 0 4px 15px rgba(0, 0, 0, 0.2);
}

.workflow-status {
    background: linear-gradient(135deg, #11998e 0%, #38ef7d 100%);
    padding: 1rem;
    border-radius: 10px;
    margin: 0.5rem 0;
    color: white;
    animation: glow 3s ease-in-out infinite alternate;
}

@keyframes glow {
    from { box-shadow: 0 0 10px rgba(56, 239, 125, 0.5); }
    to { box-shadow: 0 0 20px rgba(56, 239, 125, 0.8); }
}
</style>
""", unsafe_allow_html=True)

# Badge r√©volutionnaire
st.markdown(
    '<div class="revolution-badge">üöÄ VERSION FINALE ACTIVE</div>',
    unsafe_allow_html=True
)

# Initialisation des variables de session
if 'workflow_results' not in st.session_state:
    st.session_state.workflow_results = {}
if 'last_update' not in st.session_state:
    st.session_state.last_update = datetime.now()
if 'metrics_data' not in st.session_state:
    st.session_state.metrics_data = {
        'culture_level': random.uniform(75, 95),
        'risk_score': random.uniform(15, 35),
        'conformity': random.uniform(85, 98),
        'incidents': random.randint(0, 5)
    }

# Flags de disponibilit√© des modules
BEHAVIORX_AVAILABLE = True
CARTOGRAPHY_AVAILABLE = True
ANALYTICS_AVAILABLE = True
PATTERN_AVAILABLE = True
ANOMALY_AVAILABLE = True
OPTIMIZER_AVAILABLE = True
NORMS_AVAILABLE = True

# Fonctions utilitaires
def generate_temporal_data():
    """G√©n√®re des donn√©es temporelles pour les graphiques"""
    dates = pd.date_range(start='2025-06-15', end='2025-07-14', freq='D')
    return pd.DataFrame({
        'date': dates,
        'culture_score': np.random.normal(82, 5, len(dates)),
        'risk_level': np.random.normal(25, 8, len(dates)),
        'incidents': np.random.poisson(1.5, len(dates)),
        'conformity': np.random.normal(90, 3, len(dates))
    })

def create_correlation_matrix():
    """Cr√©e une matrice de corr√©lation inter-modules"""
    modules = ['BehaviorX', 'Culture', 'Analytics', 'Patterns', 'Anomalies']
    correlation_data = np.random.uniform(0.3, 0.9, (len(modules), len(modules)))
    np.fill_diagonal(correlation_data, 1.0)
    
    fig = go.Figure(data=go.Heatmap(
        z=correlation_data,
        x=modules,
        y=modules,
        colorscale='RdYlBu_r',
        text=np.round(correlation_data, 2),
        texttemplate="%{text}",
        textfont={"size": 12},
        hoverongaps=False
    ))
    
    fig.update_layout(
        title="üîó Matrice Corr√©lations Inter-Modules",
        width=500,
        height=400
    )
    return fig

def create_risk_distribution():
    """Cr√©e un graphique de distribution des risques"""
    categories = ['Chutes', 'TMS', 'Machines', 'Chimique', 'Incendie']
    values = [23.5, 31.2, 18.7, 15.3, 11.3]
    colors = ['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4', '#FECA57']
    
    fig = go.Figure(data=[go.Bar(
        x=categories,
        y=values,
        marker_color=colors,
        text=[f'{v}%' for v in values],
        textposition='auto'
    )])
    
    fig.update_layout(
        title="‚ö†Ô∏è Distribution Risques par Cat√©gorie",
        xaxis_title="Types de Risques",
        yaxis_title="Niveau (%)",
        showlegend=False
    )
    return fig

def create_performance_radar():
    """Cr√©e un radar de performance actuel vs objectifs"""
    categories = ['Culture SST', 'Conformit√©', 'Formation', 'Communication', 'Leadership', 'Innovation', 'R√©silience']
    actual = [82, 94, 76, 88, 91, 73, 85]
    target = [90, 95, 85, 90, 95, 80, 90]
    
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=actual,
        theta=categories,
        fill='toself',
        name='Actuel',
        line_color='rgba(255, 107, 107, 0.8)'
    ))
    
    fig.add_trace(go.Scatterpolar(
        r=target,
        theta=categories,
        fill='toself',
        name='Objectif',
        line_color='rgba(78, 205, 196, 0.8)'
    ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 100]
            )),
        showlegend=True,
        title="üéØ Performance Actuelle vs Objectifs"
    )
    return fig

def display_behaviorx_standard():
    """Interface BehaviorX Standard avec workflow complet"""
    st.markdown('<div class="workflow-status">', unsafe_allow_html=True)
    st.markdown("### üåÄ BehaviorX Standard - Workflow Multi-Agent")
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Configuration workflow
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("#### üìã Configuration Workflow")
        
        workflow_options = st.multiselect(
            "S√©lectionnez les analyses :",
            ["Analyse VCS (Visual Card Sorting)", "Analyse ABC comportementale", 
             "Agent A1 Enhanced avec Safe Self", "Score int√©gration et zones aveugles"],
            default=["Analyse VCS (Visual Card Sorting)", "Analyse ABC comportementale", 
                    "Agent A1 Enhanced avec Safe Self"]
        )
        
        execution_mode = st.selectbox(
            "Mode d'ex√©cution :",
            ["‚ö° Ex√©cution rapide (~30 secondes)", "üî¨ Analyse approfondie (~5 minutes)", "üß† Mode recherche avanc√©e (~15 minutes)"]
        )
    
    with col2:
        st.markdown("#### ‚öôÔ∏è Param√®tres Avanc√©s")
        confidence_threshold = st.slider("Seuil de confiance", 0.7, 0.95, 0.85)
        sample_size = st.selectbox("Taille √©chantillon", [100, 500, 1000, 2000])
        
    # Bouton de lancement
    if st.button("üöÄ Lancer Workflow S√©lectionn√©", type="primary", use_container_width=True):
        progress_bar = st.progress(0)
        status_text = st.empty()
        
        # Simulation workflow avec √©tapes
        steps = [
            "üîÑ Initialisation agents multi-agents...",
            "üìä Analyse VCS - Collecte donn√©es visuelles...",
            "üß† Traitement ABC comportemental...",
            "ü§ñ Agent A1 Enhanced - Analyse Safe Self...",
            "‚ö° Calcul scores et zones aveugles...",
            "‚úÖ G√©n√©ration rapport final..."
        ]
        
        for i, step in enumerate(steps):
            status_text.text(step)
            progress_bar.progress((i + 1) / len(steps))
            time.sleep(0.8)
        
        # R√©sultats simul√©s
        st.session_state.workflow_results = {
            'execution_time': f"{random.uniform(25, 35):.1f} secondes",
            'confidence_score': f"{random.uniform(82, 94):.1f}%",
            'patterns_detected': random.randint(15, 25),
            'risk_zones': random.randint(3, 8),
            'recommendations': random.randint(8, 15)
        }
        
        st.success("‚úÖ Workflow BehaviorX Standard ex√©cut√© avec succ√®s !")
    
    # Affichage des r√©sultats si disponibles
    if st.session_state.workflow_results:
        st.markdown("#### üìä R√©sultats du Workflow")
        
        col1, col2, col3, col4, col5 = st.columns(5)
        
        with col1:
            st.metric("‚è±Ô∏è Temps Ex√©cution", st.session_state.workflow_results.get('execution_time', 'N/A'))
        with col2:
            st.metric("üéØ Score Confiance", st.session_state.workflow_results.get('confidence_score', 'N/A'))
        with col3:
            st.metric("üß© Patterns D√©tect√©s", st.session_state.workflow_results.get('patterns_detected', 'N/A'))
        with col4:
            st.metric("‚ö†Ô∏è Zones Risque", st.session_state.workflow_results.get('risk_zones', 'N/A'))
        with col5:
            st.metric("üí° Recommandations", st.session_state.workflow_results.get('recommendations', 'N/A'))

def display_culture_cartography():
    """Interface Cartographie Culture SST"""
    st.markdown('<div class="correlation-alert">', unsafe_allow_html=True)
    st.markdown("### üó∫Ô∏è Cartographie Culture SST - Analyse Radar Multi-Dimensions")
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Configuration cartographie
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("#### üéØ Param√®tres Cartographie")
        
        dimensions = st.multiselect(
            "Dimensions √† analyser :",
            ["Leadership & Engagement", "Communication & Feedback", "Formation & Comp√©tences", 
             "Participation & Consultation", "Reconnaissance & Responsabilisation", 
             "Innovation & Am√©lioration", "Mesure & √âvaluation"],
            default=["Leadership & Engagement", "Communication & Feedback", "Formation & Comp√©tences"]
        )
        
        analysis_depth = st.selectbox(
            "Profondeur d'analyse :",
            ["üîç Analyse standard", "üî¨ Analyse d√©taill√©e avec STORM Research", "üß† Analyse enrichie IA"]
        )
    
    with col2:
        st.markdown("#### üìä M√©triques Temps R√©el")
        st.metric("üå°Ô∏è Niveau Culture Actuel", f"{st.session_state.metrics_data['culture_level']:.1f}%", "+2.3%")
        st.metric("üìà Tendance 30j", "Positive", "‚ÜóÔ∏è")
        st.metric("üéØ Objectif Q3", "85%", "En cours")
    
    # Bouton g√©n√©ration cartographie
    if st.button("üó∫Ô∏è G√©n√©rer Cartographie Culture", type="primary", use_container_width=True):
        with st.spinner("üîÑ G√©n√©ration cartographie culture secteur Construction..."):
            time.sleep(2)
            
            # G√©n√©ration radar performance
            radar_fig = create_performance_radar()
            st.plotly_chart(radar_fig, use_container_width=True)
            
            # Donn√©es de cartographie simul√©es
            culture_data = {
                'Leadership & Engagement': 85,
                'Communication & Feedback': 78,
                'Formation & Comp√©tences': 82,
                'Participation & Consultation': 90,
                'Reconnaissance & Responsabilisation': 77,
                'Innovation & Am√©lioration': 73,
                'Mesure & √âvaluation': 88
            }
            
            st.markdown("#### üìã Analyse D√©taill√©e par Dimension")
            
            for dim, score in culture_data.items():
                col1, col2, col3 = st.columns([2, 1, 1])
                with col1:
                    st.write(f"**{dim}**")
                with col2:
                    st.write(f"{score}%")
                with col3:
                    if score >= 85:
                        st.success("Excellent")
                    elif score >= 75:
                        st.warning("Bon")
                    else:
                        st.error("√Ä am√©liorer")
        
        st.success("‚úÖ Cartographie g√©n√©r√©e avec STORM Research enrichi !")

def display_predictive_analytics():
    """Interface Analytics Pr√©dictifs"""
    st.markdown('<div class="unified-dashboard">', unsafe_allow_html=True)
    st.markdown("### üîÆ Analytics Pr√©dictifs - ML & Alertes Intelligentes")
    st.markdown('</div>', unsafe_allow_html=True)
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üéØ Pr√©cision Mod√®le", "89.4%", "+1.2%")
    with col2:
        st.metric("üìä Pr√©dictions Actives", "1,247", "+23")
    with col3:
        st.metric("‚ö†Ô∏è Alertes Risque", "23", "-5")
    with col4:
        st.metric("üïí Derni√®re MAJ", "2min", delta=None)
    
    # Configuration pr√©dictions
    st.markdown("### ‚öôÔ∏è Configuration Pr√©dictions")
    
    col1, col2 = st.columns(2)
    
    with col1:
        prediction_horizon = st.selectbox(
            "Horizon de pr√©diction :",
            ["7 jours", "30 jours", "90 jours", "6 mois"]
        )
        
        risk_categories = st.multiselect(
            "Cat√©gories de risques :",
            ["Chutes de hauteur", "Troubles musculosquelettiques", "Accidents machines", 
             "Exposition chimique", "Risques incendie"],
            default=["Chutes de hauteur", "Troubles musculosquelettiques"]
        )
    
    with col2:
        alert_threshold = st.slider("Seuil d'alerte (%)", 10, 90, 75)
        model_type = st.selectbox(
            "Type de mod√®le :",
            ["üß† Random Forest", "üîÆ XGBoost", "‚ö° Neural Network", "üìä Ensemble"]
        )
    
    # Bouton g√©n√©ration pr√©dictions
    if st.button("üîÆ G√©n√©rer Pr√©dictions", type="primary", use_container_width=True):
        with st.spinner("üîÑ Entra√Ænement mod√®les pr√©dictifs..."):
            time.sleep(1.5)
            
            # Graphique temporel des pr√©dictions
            temporal_data = generate_temporal_data()
            
            fig = go.Figure()
            fig.add_trace(go.Scatter(
                x=temporal_data['date'],
                y=temporal_data['culture_score'],
                mode='lines+markers',
                name='Score Culture',
                line=dict(color='#4ECDC4', width=3)
            ))
            
            fig.add_trace(go.Scatter(
                x=temporal_data['date'],
                y=temporal_data['risk_level'],
                mode='lines+markers',
                name='Niveau Risque',
                line=dict(color='#FF6B6B', width=3),
                yaxis='y2'
            ))
            
            fig.update_layout(
                title="üìà √âvolution Pr√©dictive 30 Jours",
                xaxis_title="Date",
                yaxis_title="Score Culture (%)",
                yaxis2=dict(
                    title="Niveau Risque",
                    overlaying='y',
                    side='right'
                ),
                hovermode='x unified'
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Alertes pr√©dictives
            st.markdown("#### üö® Alertes Pr√©dictives")
            
            alerts = [
                {"type": "‚ö†Ô∏è Risque √âlev√©", "message": "Probabilit√© incident TMS +15% semaine prochaine", "severity": "warning"},
                {"type": "üî¥ Alerte Critique", "message": "Zone chantier B - Risque chute pr√©vu jeudi", "severity": "error"},
                {"type": "üü° Surveillance", "message": "Formation √©quipe C recommand√©e sous 7 jours", "severity": "info"}
            ]
            
            for alert in alerts:
                if alert["severity"] == "error":
                    st.error(f"{alert['type']}: {alert['message']}")
                elif alert["severity"] == "warning":
                    st.warning(f"{alert['type']}: {alert['message']}")
                else:
                    st.info(f"{alert['type']}: {alert['message']}")
        
        st.success("‚úÖ Pr√©dictions g√©n√©r√©es avec mod√®le ML enrichi !")

def display_pattern_recognition():
    """Interface Pattern Recognition"""
    st.markdown("### üß© Pattern Recognition - D√©tection Comportementale")
    
    # Configuration d√©tection
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### ‚öôÔ∏è Configuration D√©tection")
        
        pattern_types = st.multiselect(
            "Types de patterns :",
            ["Comportements √† risque", "Anomalies temporelles", "Corr√©lations cach√©es", 
             "Tendances √©mergentes", "Clusters comportementaux"],
            default=["Comportements √† risque", "Anomalies temporelles"]
        )
        
        sensitivity = st.slider("Sensibilit√© d√©tection", 0.1, 1.0, 0.7)
    
    with col2:
        st.markdown("#### üìä Statut D√©tection")
        st.metric("üîç Patterns Actifs", "42", "+8")
        st.metric("‚ö° Nouveaux (24h)", "5", "+2")
        st.metric("üéØ Pr√©cision", "91.2%", "+0.8%")
    
    if st.button("üß© Lancer D√©tection Patterns", type="primary"):
        with st.spinner("üîÑ Analyse patterns comportementaux..."):
            time.sleep(1)
            
            # Simulation patterns d√©tect√©s
            patterns_detected = [
                {"pattern": "Fatigue √©quipe matinale", "confidence": 0.89, "impact": "Moyen", "action": "Rotation sugg√©r√©e"},
                {"pattern": "Non-respect EPI zone B", "confidence": 0.94, "impact": "√âlev√©", "action": "Formation imm√©diate"},
                {"pattern": "Communication d√©faillante", "confidence": 0.76, "impact": "Moyen", "action": "Briefing renforc√©"},
                {"pattern": "Stress pr√©-deadline", "confidence": 0.85, "impact": "√âlev√©", "action": "Support psychologique"}
            ]
            
            st.markdown("#### üéØ Patterns D√©tect√©s")
            
            for i, pattern in enumerate(patterns_detected):
                col1, col2, col3, col4 = st.columns([3, 1, 1, 2])
                
                with col1:
                    st.write(f"**{pattern['pattern']}**")
                with col2:
                    st.write(f"{pattern['confidence']:.0%}")
                with col3:
                    if pattern['impact'] == '√âlev√©':
                        st.error(pattern['impact'])
                    else:
                        st.warning(pattern['impact'])
                with col4:
                    st.write(pattern['action'])
        
        st.success("‚úÖ Analyse patterns termin√©e !")

def display_anomaly_detection():
    """Interface Anomaly Detection"""
    st.markdown("### üö® Anomaly Detection - Alertes Temps R√©el")
    
    # Configuration anomalies
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### ‚öôÔ∏è Configuration Anomalies")
        
        anomaly_types = st.multiselect(
            "Types d'anomalies :",
            ["D√©viations comportementales", "Pics d'incidents", "Variations temporelles", 
             "Anomalies contextuelles", "Outliers statistiques"],
            default=["D√©viations comportementales", "Pics d'incidents"]
        )
        
        detection_method = st.selectbox(
            "M√©thode de d√©tection :",
            ["üî¨ Isolation Forest", "üìä Statistical Z-Score", "üß† One-Class SVM", "‚ö° LSTM Autoencoder"]
        )
    
    with col2:
        st.markdown("#### üö® Statut Anomalies")
        st.metric("‚ö†Ô∏è Anomalies Actives", "7", "-2")
        st.metric("üî¥ Critiques", "1", "0")
        st.metric("üü° Surveill√©es", "6", "-2")
    
    if st.button("üö® D√©tecter Anomalies", type="primary"):
        with st.spinner("üîÑ D√©tection anomalies en cours..."):
            time.sleep(1)
            
            # Graphique d√©tection anomalies
            dates = pd.date_range(start='2025-07-01', end='2025-07-14', freq='D')
            values = np.random.normal(50, 10, len(dates))
            anomalies = np.random.choice([True, False], len(dates), p=[0.1, 0.9])
            
            fig = go.Figure()
            
            # Points normaux
            fig.add_trace(go.Scatter(
                x=dates[~anomalies],
                y=values[~anomalies],
                mode='markers',
                name='Normal',
                marker=dict(color='blue', size=8)
            ))
            
            # Points anomalies
            fig.add_trace(go.Scatter(
                x=dates[anomalies],
                y=values[anomalies],
                mode='markers',
                name='Anomalies',
                marker=dict(color='red', size=12, symbol='x')
            ))
            
            fig.update_layout(
                title="üö® D√©tection Anomalies - 14 Derniers Jours",
                xaxis_title="Date",
                yaxis_title="Score Risque"
            )
            
            st.plotly_chart(fig, use_container_width=True)
            
            # Liste anomalies
            st.markdown("#### üîç Anomalies D√©tect√©es")
            
            anomalies_list = [
                {"date": "13/07/2025", "type": "Pic incidents", "severity": "Critique", "description": "7 incidents en 2h - Zone A"},
                {"date": "12/07/2025", "type": "Comportement", "severity": "Moyen", "description": "Non-respect proc√©dures √©quipe B"},
                {"date": "11/07/2025", "type": "Temporel", "severity": "Faible", "description": "Retard inhabuel √©quipe C"}
            ]
            
            for anomaly in anomalies_list:
                col1, col2, col3, col4 = st.columns([2, 2, 1, 3])
                
                with col1:
                    st.write(anomaly['date'])
                with col2:
                    st.write(anomaly['type'])
                with col3:
                    if anomaly['severity'] == 'Critique':
                        st.error(anomaly['severity'])
                    elif anomaly['severity'] == 'Moyen':
                        st.warning(anomaly['severity'])
                    else:
                        st.info(anomaly['severity'])
                with col4:
                    st.write(anomaly['description'])
        
        st.success("‚úÖ D√©tection anomalies termin√©e !")

def display_analytics_optimizer():
    """Interface Analytics Optimis√©s"""
    st.markdown("### ‚ö° Analytics Optimis√©s - Monitoring Performance")
    
    # M√©triques performance
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üöÄ Cache Hit Rate", "94.7%", "+2.1%")
    with col2:
        st.metric("‚ö° Temps Moyen", "0.3s", "-0.1s")
    with col3:
        st.metric("üìä Requ√™tes/min", "1,247", "+156")
    with col4:
        st.metric("üíæ Utilisation RAM", "67%", "+5%")
    
    # Configuration optimisation
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### ‚öôÔ∏è Optimisations Actives")
        
        optimizations = st.multiselect(
            "Modules d'optimisation :",
            ["Cache intelligent", "Compression donn√©es", "Parall√©lisation requ√™tes", 
             "Indexation avanc√©e", "Pr√©-calculs adaptatifs"],
            default=["Cache intelligent", "Compression donn√©es"]
        )
        
        performance_mode = st.selectbox(
            "Mode performance :",
            ["üöÄ Turbo (Max vitesse)", "‚öñÔ∏è √âquilibr√©", "üíæ √âconomie ressources"]
        )
    
    with col2:
        st.markdown("#### üìä Monitoring Syst√®me")
        
        # Graphique utilisation ressources
        resource_data = {
            'CPU': random.uniform(45, 75),
            'RAM': random.uniform(60, 80),
            'R√©seau': random.uniform(30, 60),
            'Stockage': random.uniform(40, 70)
        }
        
        fig = go.Figure(data=[
            go.Bar(x=list(resource_data.keys()), 
                  y=list(resource_data.values()),
                  marker_color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#96CEB4'])
        ])
        
        fig.update_layout(
            title="üíª Utilisation Ressources",
            yaxis_title="Utilisation (%)",
            height=300
        )
        
        st.plotly_chart(fig, use_container_width=True)
    
    if st.button("‚ö° Optimiser Performances", type="primary"):
        with st.spinner("üîÑ Optimisation en cours..."):
            time.sleep(1.5)
            
            optimizations_applied = [
                "‚úÖ Cache purg√© et r√©organis√© (+15% vitesse)",
                "‚úÖ Index reconstruits (+8% requ√™tes)",
                "‚úÖ Compression activ√©e (-23% stockage)",
                "‚úÖ Parall√©lisation optimis√©e (+12% throughput)"
            ]
            
            for opt in optimizations_applied:
                st.success(opt)
        
        st.success("üöÄ Optimisations appliqu√©es avec succ√®s !")

def display_norms_compliance():
    """Interface Normes & Conformit√©"""
    st.markdown("### üìã Normes & Conformit√© - Gestion R√©glementaire")
    
    # Statut conformit√©
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üìä Conformit√© Globale", "94.2%", "+1.8%")
    with col2:
        st.metric("üìã Normes Actives", "55", "+3")
    with col3:
        st.metric("‚ö†Ô∏è Non-Conformit√©s", "8", "-2")
    with col4:
        st.metric("üîÑ Audits Planifi√©s", "12", "+1")
    
    # Configuration normes
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("#### üìã S√©lection Normes")
        
        norm_categories = st.multiselect(
            "Cat√©gories de normes :",
            ["ISO 45001 (SMS)", "ISO 14001 (Environnement)", "OHSAS 18001", 
             "CSA Z1000", "CNESST Qu√©bec", "Normes sectorielles"],
            default=["ISO 45001 (SMS)", "CNESST Qu√©bec"]
        )
        
        compliance_level = st.selectbox(
            "Niveau de conformit√© requis :",
            ["ü•â Basique (70%)", "ü•à Standard (85%)", "ü•á Excellence (95%)"]
        )
    
    with col2:
        st.markdown("#### üéØ Secteur d'Application")
        
        sector = st.selectbox(
            "Secteur d'activit√© :",
            ["üèóÔ∏è Construction", "üè≠ Manufacture", "‚õèÔ∏è Mines", "üõ¢Ô∏è P√©trochimie", "üè• Sant√©"]
        )
        
        business_size = st.selectbox(
            "Taille entreprise :",
            ["üè¢ PME (<50 employ√©s)", "üè¨ Moyenne (50-500)", "üè≠ Grande (500+)"]
        )
    
    # Tableau conformit√©
    st.markdown("#### üìä √âtat de Conformit√© par Norme")
    
    compliance_data = {
        'Norme': ['ISO 45001', 'ISO 14001', 'CNESST QC', 'CSA Z1000', 'Loi 27'],
        'Statut': ['‚úÖ Conforme', '‚ö†Ô∏è Partiel', '‚úÖ Conforme', 'üîÑ En cours', '‚úÖ Conforme'],
        'Score': ['96%', '78%', '94%', '82%', '98%'],
        '√âch√©ance': ['2025-12-15', '2025-09-30', '2025-11-20', '2025-08-15', '2026-01-30'],
        'Actions': ['Maintenance', 'Formation requise', 'Audit annuel', 'Documentation', 'Surveillance']
    }
    
    df_compliance = pd.DataFrame(compliance_data)
    st.dataframe(df_compliance, use_container_width=True)
    
    if st.button("üìã Audit Conformit√© Complet", type="primary"):
        with st.spinner("üîÑ Audit conformit√© en cours..."):
            time.sleep(2)
            
            audit_results = {
                'Conformit√©s valid√©es': 47,
                'Non-conformit√©s d√©tect√©es': 8,
                'Actions correctives': 12,
                'Score global': '94.2%',
                'Prochaine √©ch√©ance': '2025-08-15'
            }
            
            st.markdown("#### üìä R√©sultats Audit")
            
            col1, col2, col3 = st.columns(3)
            
            with col1:
                st.metric("‚úÖ Conformit√©s", audit_results['Conformit√©s valid√©es'])
                st.metric("‚ùå Non-Conformit√©s", audit_results['Non-conformit√©s d√©tect√©es'])
            
            with col2:
                st.metric("üîß Actions Correctives", audit_results['Actions correctives'])
                st.metric("üìä Score Global", audit_results['Score global'])
            
            with col3:
                st.metric("üìÖ Prochaine √âch√©ance", audit_results['Prochaine √©ch√©ance'])
            
            # Recommandations
            st.markdown("#### üí° Recommandations Prioritaires")
            
            recommendations = [
                "üéØ Formation √©quipe sur ISO 14001 - √âch√©ance 30 jours",
                "üìã Mise √† jour documentation CSA Z1000 - √âch√©ance 15 jours", 
                "üîç Audit interne zone production - √âch√©ance 7 jours"
            ]
            
            for rec in recommendations:
                st.info(rec)
        
        st.success("‚úÖ Audit conformit√© termin√© avec succ√®s !")

# Interface principale
def main():
    """Interface principale SafetyGraph BehaviorX"""
    
    # Header principal
    st.markdown(
        '<div class="main-header"><h1>üéØ SafetyGraph BehaviorX + Cartographie Culture SST</h1>'
        '<p>üîÆ Powered by Safety Agentique | üß† LangGraph Multi-Agent | üåÄ STORM Research | üé® M√©moire IA Adaptative</p></div>',
        unsafe_allow_html=True
    )
    
    # Dashboard unifi√© avec m√©triques temps r√©el
    st.markdown('<div class="unified-dashboard">', unsafe_allow_html=True)
    st.markdown("### üìä Dashboard Unifi√© - M√©triques Temps R√©el")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="enhanced-metric">', unsafe_allow_html=True)
        st.metric(
            "üå°Ô∏è Niveau Culture",
            f"{st.session_state.metrics_data['culture_level']:.1f}%",
            delta="+2.3%"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="enhanced-metric">', unsafe_allow_html=True)
        st.metric(
            "‚ö†Ô∏è Score Risque",
            f"{st.session_state.metrics_data['risk_score']:.1f}%",
            delta="-1.8%"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="enhanced-metric">', unsafe_allow_html=True)
        st.metric(
            "üìã Conformit√©",
            f"{st.session_state.metrics_data['conformity']:.1f}%",
            delta="+0.9%"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col4:
        st.markdown('<div class="enhanced-metric">', unsafe_allow_html=True)
        st.metric(
            "üö® Incidents (30j)",
            st.session_state.metrics_data['incidents'],
            delta="-2"
        )
        st.markdown('</div>', unsafe_allow_html=True)
    
    st.markdown('</div>', unsafe_allow_html=True)
    
    # Graphiques dashboard enrichi
    st.markdown("### üìä Dashboard Enrichi - Visualisations Avanc√©es")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Graphique temporel
        temporal_data = generate_temporal_data()
        fig_temporal = go.Figure()
        
        fig_temporal.add_trace(go.Scatter(
            x=temporal_data['date'],
            y=temporal_data['culture_score'],
            mode='lines+markers',
            name='Culture SST',
            line=dict(color='#4ECDC4', width=3)
        ))
        
        fig_temporal.update_layout(
            title="üìà √âvolution Culture SST (30 jours)",
            height=300
        )
        
        st.plotly_chart(fig_temporal, use_container_width=True)
        
        # Matrice corr√©lations
        correlation_fig = create_correlation_matrix()
        st.plotly_chart(correlation_fig, use_container_width=True)
    
    with col2:
        # Distribution des risques
        risk_fig = create_risk_distribution()
        st.plotly_chart(risk_fig, use_container_width=True)
        
        # Radar performance
        radar_fig = create_performance_radar()
        st.plotly_chart(radar_fig, use_container_width=True)
    
    # Onglets principaux
    main_tabs = st.tabs([
        "üåÄ BehaviorX Standard",
        "üó∫Ô∏è Cartographie Culture", 
        "üîÆ Analytics Pr√©dictifs",
        "üß© Pattern Recognition",
        "üö® Anomaly Detection", 
        "‚ö° Analytics Optimis√©s",
        "üìã Normes & Conformit√©"
    ])
    
    with main_tabs[0]:
        if BEHAVIORX_AVAILABLE:
            display_behaviorx_standard()
        else:
            st.info("üîÑ Module BehaviorX en cours d'int√©gration...")
    
    with main_tabs[1]:
        if CARTOGRAPHY_AVAILABLE:
            display_culture_cartography()
        else:
            st.info("üîÑ Module Cartographie en cours d'int√©gration...")
    
    with main_tabs[2]:
        if ANALYTICS_AVAILABLE:
            display_predictive_analytics()
        else:
            st.info("üîÑ Module Analytics en cours d'int√©gration...")
    
    with main_tabs[3]:
        if PATTERN_AVAILABLE:
            display_pattern_recognition()
        else:
            st.info("üîÑ Module Pattern Recognition en cours d'int√©gration...")
    
    with main_tabs[4]:
        if ANOMALY_AVAILABLE:
            display_anomaly_detection()
        else:
            st.info("üîÑ Module Anomaly Detection en cours d'int√©gration...")
    
    with main_tabs[5]:
        if OPTIMIZER_AVAILABLE:
            display_analytics_optimizer()
        else:
            st.info("üîÑ Module Optimisation en cours d'int√©gration...")
    
    with main_tabs[6]:
        if NORMS_AVAILABLE:
            display_norms_compliance()
        else:
            st.info("üîÑ Module Normes en cours d'int√©gration...")

# Sidebar avec configuration
def setup_sidebar():
    """Configuration sidebar avec actions rapides"""
    
    with st.sidebar:
        st.markdown("## ‚öôÔ∏è Configuration SafetyGraph")
        
        # Informations enterprise
        st.markdown("### üè¢ Informations Enterprise")
        enterprise_name = st.text_input("Nom entreprise", value="Enterprise ABC")
        
        # Secteur d'activit√©
        st.markdown("### üèóÔ∏è Secteur d'Activit√© (SCIAN)")
        sector = st.selectbox(
            "Choisir secteur",
            ["Construction (23)", "Manufacture (31-33)", "Mines (21)", "Services (54)"],
            index=0
        )
        
        # Mode workflow
        st.markdown("### üéØ Mode Workflow")
        workflow_mode = st.selectbox(
            "Mode d'analyse",
            ["VCS + ABC seulement", "Complet avec Agent A1", "Mode recherche avanc√©e"],
            index=1
        )
        
        st.markdown("---")
        
        # Actions rapides
        st.markdown("### ‚ö° Actions Rapides")
        
        if st.button("üöÄ Lancer Workflow Complet", use_container_width=True):
            st.session_state.quick_action = "workflow_complete"
            st.success("‚úÖ Workflow lanc√© !")
        
        if st.button("üìä G√©n√©rer Rapport", use_container_width=True):
            st.session_state.quick_action = "generate_report"
            st.success("‚úÖ Rapport en g√©n√©ration...")
        
        if st.button("üîÑ Actualiser Donn√©es", use_container_width=True):
            # Mise √† jour des m√©triques
            st.session_state.metrics_data = {
                'culture_level': random.uniform(75, 95),
                'risk_score': random.uniform(15, 35),
                'conformity': random.uniform(85, 98),
                'incidents': random.randint(0, 5)
            }
            st.session_state.last_update = datetime.now()
            st.success("‚úÖ Donn√©es actualis√©es !")
        
        if st.button("üéØ Calibrer Mod√®les", use_container_width=True):
            st.session_state.quick_action = "calibrate_models"
            st.success("‚úÖ Calibrage mod√®les lanc√© !")
        
        if st.button("üìã Audit Express", use_container_width=True):
            st.session_state.quick_action = "express_audit"
            st.success("‚úÖ Audit express d√©marr√© !")
        
        st.markdown("---")
        
        # Statut syst√®me
        st.markdown("### üîã Statut Syst√®me")
        st.markdown(f"**Derni√®re MAJ :** {st.session_state.last_update.strftime('%H:%M:%S')}")
        st.markdown("**Modules :** 7/7 Actifs")
        st.markdown("**Performance :** Optimal")
        
        # Validation configuration
        st.markdown("### ‚úÖ Validation")
        
        if st.button("üíæ Sauvegarder Config", use_container_width=True):
            st.markdown('<div class="validation-success">Configuration sauvegard√©e !</div>', unsafe_allow_html=True)
        
        if st.button("üîÑ Restaurer D√©faut", use_container_width=True):
            st.markdown('<div class="validation-warning">Configuration restaur√©e !</div>', unsafe_allow_html=True)

# Point d'entr√©e principal
if __name__ == "__main__":
    setup_sidebar()
    main()
    
    # Footer
    st.markdown("---")
    st.markdown(
        '<div style="text-align: center; color: #666; padding: 1rem;">'
        'üéØ SafetyGraph BehaviorX - D√©velopp√© par Mario Plourde @ Preventera/GenAISafety<br>'
        '‚ö° Propuls√© par Claude 4 Sonnet | üöÄ Version Finale Compl√®te | üìÖ 14 juillet 2025'
        '</div>',
        unsafe_allow_html=True
    )