"""
Test simple du prototype SafeGraph
"""

from src.core.state import create_initial_state, IntentType, SectorType
from src.core.config import config

def test_basic_functionality():
    """Test des fonctionnalit√©s de base"""
    
    print("üß™ Test des fonctionnalit√©s de base SafeGraph")
    print("=" * 50)
    
    # Test 1: Cr√©ation d'√©tat
    print("\n1. Test cr√©ation d'√©tat initial...")
    test_query = "√âvaluation s√©curit√© chantier construction"
    state = create_initial_state(test_query)
    
    assert state["user_input"] == test_query
    assert state["session_id"].startswith("session_")
    assert state["timestamp"]
    print("‚úÖ √âtat initial cr√©√© correctement")
    
    # Test 2: Configuration
    print("\n2. Test configuration...")
    assert len(config.scian_sectors) >= 5
    assert "236" in config.scian_sectors  # Construction
    print(f"‚úÖ Configuration charg√©e - {len(config.scian_sectors)} secteurs")
    
    # Test 3: √ânum√©rations
    print("\n3. Test √©num√©rations...")
    assert IntentType.EVALUATION
    assert SectorType.CONSTRUCTION
    print("‚úÖ √ânum√©rations d√©finies correctement")
    
    # Test 4: Import des agents
    print("\n4. Test import des agents...")
    try:
        from src.agents import router_agent, context_agent
        from src.agents.evaluation.collecteur_agent import collecteur_agent
        from src.agents.analysis.analyste_agent import analyste_agent
        from src.agents.recommendation.recommandation_agent import recommandation_agent
        print("‚úÖ Tous les agents import√©s avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur import agents : {e}")
        return False
    
    print(f"\nüéâ Tous les tests de base r√©ussis !")
    print(f"SafeGraph prototype op√©rationnel")
    
    return True

if __name__ == "__main__":
    success = test_basic_functionality()
    exit(0 if success else 1)