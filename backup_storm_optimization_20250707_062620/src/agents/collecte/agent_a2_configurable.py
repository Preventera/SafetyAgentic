# Agent A2 Configurable Complet - SafetyAgentic
# =============================================
# Version production avec syst√®me hybride donn√©es r√©elles + synth√©tiques

import asyncio
import os
import json
import aiohttp
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any, Union
import logging
from enum import Enum
from dataclasses import dataclass, field
import numpy as np

# Import du g√©n√©rateur synth√©tique valid√©
try:
    from generateur_donnees_synthetiques import (
        GenerateurDonneesSynthetiques, 
        SecteurActivite, 
        TypeIncident
    )
except ImportError:
    print("‚ö†Ô∏è G√©n√©rateur synth√©tique non trouv√© - Mode synth√©tique d√©sactiv√©")
    GenerateurDonneesSynthetiques = None

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("SafetyAgentic.A2.Configurable")

class ModeCollecteDonnees(Enum):
    """Modes de collecte donn√©es A2"""
    REEL_UNIQUEMENT = "reel_uniquement"           # Seulement donn√©es API/DB
    SYNTHETIQUE_UNIQUEMENT = "synthetique"       # Seulement donn√©es g√©n√©r√©es
    HYBRIDE_AUTO = "hybride_auto"                 # Auto: r√©el si disponible, sinon synth√©tique
    HYBRIDE_FORCE = "hybride_force"               # Mix forc√© r√©el + synth√©tique
    DEMO_MODE = "demo"                            # Mode d√©monstration avec donn√©es vari√©es

class SourceDonnees(Enum):
    """Sources de donn√©es A2"""
    API_REST = "api_rest"
    BASE_DONNEES = "base_donnees"
    FICHIER_CSV = "fichier_csv"
    FORMULAIRE_WEB = "formulaire_web"
    MOBILE_APP = "mobile_app"
    SYNTHETIQUE = "synthetique"

@dataclass
class ConfigurationA2:
    """Configuration Agent A2"""
    mode_collecte: ModeCollecteDonnees = ModeCollecteDonnees.HYBRIDE_AUTO
    sources_prioritaires: List[SourceDonnees] = field(default_factory=lambda: [
        SourceDonnees.API_REST, SourceDonnees.BASE_DONNEES, SourceDonnees.SYNTHETIQUE
    ])
    api_endpoint: str = "http://localhost:8000/api/v1"
    db_connection_string: str = ""
    timeout_seconds: float = 5.0
    fallback_to_synthetic: bool = True
    synthetic_seed: Optional[int] = 42
    cache_enabled: bool = True
    min_confidence_real_data: float = 0.8
    quality_distribution_synthetic: Dict[str, float] = field(default_factory=lambda: {
        "excellente": 0.20, "bonne": 0.35, "moyenne": 0.30, "faible": 0.15
    })

@dataclass
class ObservationTerrain:
    """Structure observation terrain standardis√©e"""
    id_observation: str
    timestamp: datetime
    secteur: str
    entreprise: str
    variables_culture: Dict[str, float]
    conformite_epi: Dict[str, Any]
    dangers_detectes: List[str]
    contexte: Dict[str, Any]
    source: SourceDonnees
    confidence_score: float
    meta_donnees: Dict[str, Any] = field(default_factory=dict)

class CollecteurDonneesReelles:
    """Collecteur pour donn√©es d'observations r√©elles"""
    
    def __init__(self, config: ConfigurationA2):
        self.config = config
        self.cache = {} if config.cache_enabled else None
        
    async def collecter_api_rest(self, 
                               incident_data: Dict, 
                               context: Dict = None) -> Optional[List[ObservationTerrain]]:
        """Collecte via API REST"""
        try:
            params = self._build_api_params(incident_data, context)
            timeout = aiohttp.ClientTimeout(total=self.config.timeout_seconds)
            
            async with aiohttp.ClientSession(timeout=timeout) as session:
                api_url = f"{self.config.api_endpoint}/observations/"
                
                async with session.get(api_url, params=params) as response:
                    if response.status == 200:
                        data = await response.json()
                        observations_raw = data.get("observations", [])
                        
                        observations = []
                        for obs_data in observations_raw:
                            obs = self._parse_api_observation(obs_data)
                            if obs and self._validate_observation(obs):
                                observations.append(obs)
                        
                        if observations:
                            logger.info(f"üìä {len(observations)} observation(s) API collect√©e(s)")
                            return observations
            
            return None
            
        except asyncio.TimeoutError:
            logger.warning(f"‚è±Ô∏è Timeout API ({self.config.timeout_seconds}s)")
            return None
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur collecte API: {str(e)}")
            return None
    
    async def collecter_base_donnees(self, 
                                   incident_data: Dict, 
                                   context: Dict = None) -> Optional[List[ObservationTerrain]]:
        """Collecte via base de donn√©es"""
        try:
            # Simulation requ√™te DB (√† remplacer par vraie impl√©mentation)
            # En production, utiliser asyncpg, aiomysql, etc.
            
            if not self.config.db_connection_string:
                return None
            
            # Requ√™te simul√©e
            await asyncio.sleep(0.1)  # Simulation latence DB
            
            # Retour donn√©es simul√©es pour d√©mo
            if incident_data.get("SECTEUR_SCIAN", "").upper() == "CONSTRUCTION":
                observation_db = ObservationTerrain(
                    id_observation=f"DB_{datetime.now().strftime('%Y%m%d_%H%M%S')}",
                    timestamp=datetime.now() - timedelta(days=np.random.randint(1, 30)),
                    secteur="CONSTRUCTION",
                    entreprise="Entreprise DB Construction",
                    variables_culture={
                        "usage_epi": 6.5,
                        "respect_procedures": 5.8,
                        "formation_securite": 6.2,
                        "supervision_directe": 5.5,
                        "communication_risques": 6.0,
                        "leadership_sst": 5.9
                    },
                    conformite_epi={
                        "epi_analyses": 8,
                        "epi_conformes": 5,
                        "taux_conformite": 62.5,
                        "epi_types": ["casque", "chaussures_securite", "gants"]
                    },
                    dangers_detectes=["hauteur", "chute_materiel"],
                    contexte={
                        "nb_travailleurs": 6,
                        "duree_observation": 2.5,
                        "conditions": "normales"
                    },
                    source=SourceDonnees.BASE_DONNEES,
                    confidence_score=0.85
                )
                
                logger.info("üìä 1 observation DB collect√©e")
                return [observation_db]
            
            return None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur collecte DB: {str(e)}")
            return None
    
    async def collecter_fichier_csv(self, 
                                  filepath: str) -> Optional[List[ObservationTerrain]]:
        """Collecte via fichier CSV"""
        try:
            import pandas as pd
            
            if not os.path.exists(filepath):
                return None
            
            df = pd.read_csv(filepath)
            observations = []
            
            for _, row in df.iterrows():
                obs = self._parse_csv_row(row)
                if obs and self._validate_observation(obs):
                    observations.append(obs)
            
            if observations:
                logger.info(f"üìä {len(observations)} observation(s) CSV collect√©e(s)")
                return observations
            
            return None
            
        except Exception as e:
            logger.warning(f"‚ö†Ô∏è Erreur collecte CSV: {str(e)}")
            return None
    
    def _build_api_params(self, incident_data: Dict, context: Dict) -> Dict:
        """Construction param√®tres API"""
        params = {
            "secteur": incident_data.get("SECTEUR_SCIAN", ""),
            "limit": 10,
            "recent_days": 30
        }
        
        if context:
            if "nom_entreprise" in context:
                params["entreprise"] = context["nom_entreprise"]
            if "region" in context:
                params["region"] = context["region"]
        
        return params
    
    def _parse_api_observation(self, data: Dict) -> Optional[ObservationTerrain]:
        """Parse observation depuis API"""
        try:
            return ObservationTerrain(
                id_observation=data.get("id", ""),
                timestamp=datetime.fromisoformat(data.get("timestamp", datetime.now().isoformat())),
                secteur=data.get("secteur", ""),
                entreprise=data.get("entreprise", ""),
                variables_culture=data.get("variables_culture", {}),
                conformite_epi=data.get("conformite_epi", {}),
                dangers_detectes=data.get("dangers", []),
                contexte=data.get("contexte", {}),
                source=SourceDonnees.API_REST,
                confidence_score=data.get("confidence", 0.8),
                meta_donnees=data.get("meta", {})
            )
        except Exception:
            return None
    
    def _parse_csv_row(self, row) -> Optional[ObservationTerrain]:
        """Parse observation depuis ligne CSV"""
        try:
            # Parsing adapt√© selon format CSV
            variables_culture = {}
            for col in ["usage_epi", "respect_procedures", "formation_securite", 
                       "supervision_directe", "communication_risques", "leadership_sst"]:
                if col in row:
                    variables_culture[col] = float(row[col])
            
            return ObservationTerrain(
                id_observation=str(row.get("id", "")),
                timestamp=pd.to_datetime(row.get("timestamp", datetime.now())),
                secteur=str(row.get("secteur", "")),
                entreprise=str(row.get("entreprise", "")),
                variables_culture=variables_culture,
                conformite_epi={
                    "taux_conformite": float(row.get("conformite_epi", 50.0)),
                    "epi_analyses": int(row.get("epi_analyses", 5))
                },
                dangers_detectes=str(row.get("dangers", "")).split(",") if row.get("dangers") else [],
                contexte={"nb_travailleurs": int(row.get("nb_travailleurs", 5))},
                source=SourceDonnees.FICHIER_CSV,
                confidence_score=float(row.get("confidence", 0.7))
            )
        except Exception:
            return None
    
    def _validate_observation(self, obs: ObservationTerrain) -> bool:
        """Validation observation"""
        if not obs.id_observation or not obs.secteur:
            return False
        
        if obs.confidence_score < self.config.min_confidence_real_data:
            return False
        
        # Validation variables culture
        for var, score in obs.variables_culture.items():
            if not (0 <= score <= 10):
                return False
        
        return True

class MoteurFusionHybride:
    """Moteur de fusion donn√©es r√©elles + synth√©tiques"""
    
    def __init__(self, config: ConfigurationA2):
        self.config = config
        
    def fusionner_observations(self,
                             observations_reelles: List[ObservationTerrain],
                             observation_synthetique: Dict,
                             poids_reel: float = 0.7) -> Dict[str, Any]:
        """
        Fusion intelligente observations r√©elles + synth√©tiques
        
        Args:
            observations_reelles: Liste observations terrain r√©elles
            observation_synthetique: Observation g√©n√©r√©e synth√©tiquement
            poids_reel: Poids accord√© aux donn√©es r√©elles (0.0-1.0)
        """
        
        logger.info(f"üîó Fusion {len(observations_reelles)} obs. r√©elles + 1 synth√©tique")
        
        poids_synthetique = 1.0 - poids_reel
        
        # Agr√©gation variables r√©elles
        variables_reelles = self._agreger_variables_reelles(observations_reelles)
        variables_synthetiques = observation_synthetique["variables_culture"]
        
        # Fusion pond√©r√©e
        variables_fusionnees = {}
        for var in variables_synthetiques.keys():
            val_reelle = variables_reelles.get(var, variables_synthetiques[var])
            val_synthetique = variables_synthetiques[var]
            
            valeur_fusionnee = (val_reelle * poids_reel) + (val_synthetique * poids_synthetique)
            variables_fusionnees[var] = max(0, min(10, round(valeur_fusionnee, 1)))
        
        # Formatage r√©sultat fusion
        variables_culture_terrain = {}
        for var, score in variables_fusionnees.items():
            variables_culture_terrain[var] = {
                "score": score,
                "source": "fusion_hybrid",
                "observations_reelles": len(observations_reelles),
                "poids_reel": poids_reel,
                "poids_synthetique": poids_synthetique
            }
        
        # M√©triques fusionn√©es
        score_comportement = int(sum(variables_fusionnees.values()) / len(variables_fusionnees) * 10)
        
        # Conformit√© bas√©e sur donn√©es r√©elles si disponibles
        if observations_reelles:
            conformites = [obs.conformite_epi.get("taux_conformite", 50) for obs in observations_reelles]
            conformite_moyenne = sum(conformites) / len(conformites)
        else:
            conformite_synthetique = observation_synthetique["conformite"]
            conformite_moyenne = conformite_synthetique.get("taux_conformite", 50)
        
        # Dangers agr√©g√©s
        dangers_reels = set()
        for obs in observations_reelles:
            dangers_reels.update(obs.dangers_detectes)
        dangers_synthetiques = set(observation_synthetique["conformite"]["dangers"])
        dangers_fusionnes = list(dangers_reels.union(dangers_synthetiques))
        
        return {
            "agent_id": "A2_HYBRIDE",
            "confidence_score": 0.88,  # Hybride = confiance √©lev√©e
            "variables_culture_terrain": variables_culture_terrain,
            "observations": {
                "score_comportement": score_comportement,
                "dangers_detectes": len(dangers_fusionnes),
                "conformite_procedures": conformite_moyenne,
                "source_fusion": "hybrid_real_synthetic"
            },
            "contexte_observation": {
                "observations_reelles": len(observations_reelles),
                "observation_synthetique": True,
                "poids_fusion": {"reel": poids_reel, "synthetique": poids_synthetique},
                "dangers_fusionnes": dangers_fusionnes
            },
            "data_source": "hybrid_fusion",
            "fusion_details": {
                "nb_observations_reelles": len(observations_reelles),
                "sources_reelles": list(set(obs.source.value for obs in observations_reelles)),
                "variables_fusionnees": list(variables_fusionnees.keys()),
                "qualite_fusion": "EXCELLENTE" if len(observations_reelles) >= 3 else "BONNE"
            }
        }
    
    def _agreger_variables_reelles(self, observations: List[ObservationTerrain]) -> Dict[str, float]:
        """Agr√©gation variables culture des observations r√©elles"""
        if not observations:
            return {}
        
        variables_agregees = {}
        all_variables = set()
        
        # Collecte toutes les variables
        for obs in observations:
            all_variables.update(obs.variables_culture.keys())
        
        # Moyenne pond√©r√©e par confidence_score
        for var in all_variables:
            valeurs_ponderees = []
            poids_total = 0
            
            for obs in observations:
                if var in obs.variables_culture:
                    valeur = obs.variables_culture[var]
                    poids = obs.confidence_score
                    valeurs_ponderees.append(valeur * poids)
                    poids_total += poids
            
            if poids_total > 0:
                variables_agregees[var] = sum(valeurs_ponderees) / poids_total
        
        return variables_agregees

class AgentA2Configurable:
    """
    Agent A2 Configurable Complet - SafetyAgentic
    Syst√®me hybride donn√©es r√©elles + synth√©tiques avec configuration dynamique
    """
    
    def __init__(self, config: Optional[Union[Dict, ConfigurationA2]] = None):
        """Initialisation Agent A2 Configurable"""
        
        # Configuration
        if isinstance(config, dict):
            self.config = ConfigurationA2(**config)
        elif isinstance(config, ConfigurationA2):
            self.config = config
        else:
            self.config = ConfigurationA2()
        
        self.agent_id = "A2_CONFIGURABLE"
        self.agent_name = "Observations Terrain Configurables"
        self.version = "2.0.0"
        
        # Composants
        self.collecteur_reel = CollecteurDonneesReelles(self.config)
        self.moteur_fusion = MoteurFusionHybride(self.config)
        
        # G√©n√©rateur synth√©tique (si disponible)
        if GenerateurDonneesSynthetiques:
            self.generateur_synthetique = GenerateurDonneesSynthetiques(
                seed=self.config.synthetic_seed
            )
        else:
            self.generateur_synthetique = None
            logger.warning("‚ö†Ô∏è G√©n√©rateur synth√©tique non disponible")
        
        # Cache
        self.cache_observations = {} if self.config.cache_enabled else None
        
        logger.info(f"ü§ñ {self.agent_name} v{self.version} initialis√©")
        logger.info(f"üîß Mode: {self.config.mode_collecte.value}")
    
    async def process(self, incident_data: Dict, context: Dict = None) -> Dict[str, Any]:
        """
        Traitement principal Agent A2 selon configuration
        
        Args:
            incident_data: Donn√©es incident CNESST
            context: Contexte organisationnel
            
        Returns:
            R√©sultat observation A2 standardis√©
        """
        start_time = datetime.now()
        analysis_id = f"A2_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
        
        logger.info(f"üîÑ D√©marrage Agent A2 - Mode: {self.config.mode_collecte.value}")
        
        try:
            # Validation entr√©es
            self._validate_input_data(incident_data, context)
            
            # V√©rification cache
            if self.cache_observations:
                cache_key = self._generate_cache_key(incident_data, context)
                if cache_key in self.cache_observations:
                    logger.info("üì¶ R√©sultat depuis cache")
                    return self.cache_observations[cache_key]
            
            # Traitement selon mode configur√©
            mode = self.config.mode_collecte
            
            if mode == ModeCollecteDonnees.REEL_UNIQUEMENT:
                result = await self._process_real_data_only(incident_data, context)
                
            elif mode == ModeCollecteDonnees.SYNTHETIQUE_UNIQUEMENT:
                result = await self._process_synthetic_data_only(incident_data, context)
                
            elif mode == ModeCollecteDonnees.HYBRIDE_AUTO:
                result = await self._process_hybrid_auto(incident_data, context)
                
            elif mode == ModeCollecteDonnees.HYBRIDE_FORCE:
                result = await self._process_hybrid_forced(incident_data, context)
                
            elif mode == ModeCollecteDonnees.DEMO_MODE:
                result = await self._process_demo_mode(incident_data, context)
                
            else:
                raise ValueError(f"Mode collecte non support√©: {mode}")
            
            # Finalisation
            performance_time = (datetime.now() - start_time).total_seconds()
            
            result.update({
                "agent_info": {
                    "agent_id": self.agent_id,
                    "agent_name": self.agent_name,
                    "version": self.version,
                    "analysis_id": analysis_id,
                    "mode_collecte": mode.value,
                    "timestamp": datetime.now().isoformat(),
                    "performance_time": performance_time
                }
            })
            
            # Cache si activ√©
            if self.cache_observations and cache_key:
                self.cache_observations[cache_key] = result
            
            logger.info(f"‚úÖ Agent A2 termin√© - {performance_time:.3f}s")
            return result
            
        except Exception as e:
            logger.error(f"‚ùå Erreur Agent A2: {str(e)}")
            
            # Fallback d'urgence vers synth√©tique
            if (self.config.fallback_to_synthetic and 
                mode != ModeCollecteDonnees.SYNTHETIQUE_UNIQUEMENT and
                self.generateur_synthetique):
                
                logger.warning("üîÑ Fallback d'urgence vers synth√©tique")
                return await self._process_synthetic_data_only(incident_data, context)
            
            return {
                "error": str(e),
                "agent_id": self.agent_id,
                "mode_collecte": mode.value,
                "fallback_available": self.config.fallback_to_synthetic
            }
    
    async def _process_real_data_only(self, incident_data: Dict, context: Dict) -> Dict:
        """Traitement donn√©es r√©elles uniquement"""
        logger.info("üìä Mode: Donn√©es r√©elles uniquement")
        
        observations_reelles = await self._collect_real_observations(incident_data, context)
        
        if not observations_reelles:
            if self.config.fallback_to_synthetic:
                logger.warning("‚ö†Ô∏è Aucune donn√©e r√©elle ‚Üí fallback synth√©tique")
                return await self._process_synthetic_data_only(incident_data, context)
            else:
                raise ValueError("Aucune observation r√©elle trouv√©e")
        
        return self._format_real_data_result(observations_reelles)
    
    async def _process_synthetic_data_only(self, incident_data: Dict, context: Dict) -> Dict:
        """Traitement donn√©es synth√©tiques uniquement"""
        logger.info("üî¨ Mode: Donn√©es synth√©tiques uniquement")
        
        if not self.generateur_synthetique:
            raise ValueError("G√©n√©rateur synth√©tique non disponible")
        
        # Extraction contexte pour g√©n√©ration cibl√©e
        secteur = self._extract_secteur_from_incident(incident_data)
        type_incident = self._extract_type_incident_from_data(incident_data)
        qualite_culture = self._estimate_culture_quality(context)
        
        # G√©n√©ration observation synth√©tique
        observation_synthetique = self.generateur_synthetique.generate_observation_synthetique(
            secteur=secteur,
            type_incident=type_incident,
            qualite_culture=qualite_culture
        )
        
        return self._format_synthetic_data_result(observation_synthetique, incident_data, context)
    
    async def _process_hybrid_auto(self, incident_data: Dict, context: Dict) -> Dict:
        """Mode hybride automatique"""
        logger.info("üîÑ Mode: Hybride automatique")
        
        # Tentative donn√©es r√©elles
        observations_reelles = await self._collect_real_observations(incident_data, context)
        
        if observations_reelles and len(observations_reelles) >= 2:
            logger.info("‚úÖ Utilisation donn√©es r√©elles (suffisantes)")
            result = self._format_real_data_result(observations_reelles)
            result["data_source"] = "real_sufficient"
            return result
        
        # Mode hybride si quelques donn√©es r√©elles
        if observations_reelles and self.generateur_synthetique:
            logger.info("üîó Mode hybride (peu de donn√©es r√©elles)")
            return await self._create_hybrid_result(observations_reelles, incident_data, context)
        
        # Fallback synth√©tique pur
        if self.generateur_synthetique:
            logger.info("üîÑ Fallback synth√©tique pur")
            result = await self._process_synthetic_data_only(incident_data, context)
            result["data_source"] = "synthetic_fallback"
            return result
        
        raise ValueError("Aucune source de donn√©es disponible")
    
    async def _process_hybrid_forced(self, incident_data: Dict, context: Dict) -> Dict:
        """Mode hybride forc√©"""
        logger.info("‚ö° Mode: Hybride forc√©")
        
        # Collecte donn√©es r√©elles (peut √™tre vide)
        observations_reelles = await self._collect_real_observations(incident_data, context)
        
        if not self.generateur_synthetique:
            if observations_reelles:
                return self._format_real_data_result(observations_reelles)
            else:
                raise ValueError("Aucune source de donn√©es disponible")
        
        # Cr√©ation r√©sultat hybride (m√™me si pas de donn√©es r√©elles)
        return await self._create_hybrid_result(observations_reelles, incident_data, context)
    
    async def _process_demo_mode(self, incident_data: Dict, context: Dict) -> Dict:
        """Mode d√©monstration"""
        logger.info("üé≠ Mode: D√©monstration")
        
        if not self.generateur_synthetique:
            raise ValueError("Mode d√©mo n√©cessite le g√©n√©rateur synth√©tique")
        
        # Sc√©nario d√©mo al√©atoire
        import random
        scenarios = ["excellent_safety", "problematic_site", "average_company", "post_incident"]
        scenario = random.choice(scenarios)
        
        # Param√®tres selon sc√©nario
        if scenario == "excellent_safety":
            secteur = SecteurActivite.SOINS_SANTE
            qualite = "excellente"
        elif scenario == "problematic_site":
            secteur = SecteurActivite.CONSTRUCTION
            qualite = "faible"
        elif scenario == "average_company":
            secteur = SecteurActivite.FABRICATION
            qualite = "moyenne"
        else:  # post_incident
            secteur = SecteurActivite.TRANSPORT
            qualite = "faible"
        
        observation = self.generateur_synthetique.generate_observation_synthetique(
            secteur=secteur,
            qualite_culture=qualite
        )
        
        result = self._format_synthetic_data_result(observation, incident_data, context)
        result["data_source"] = "demo"
        result["demo_scenario"] = scenario
        
        return result
    
    async def _collect_real_observations(self, incident_data: Dict, context: Dict) -> List[ObservationTerrain]:
        """Collecte observations r√©elles selon sources prioritaires"""
        
        observations = []
        
        for source in self.config.sources_prioritaires:
            try:
                if source == SourceDonnees.API_REST:
                    obs_api = await self.collecteur_reel.collecter_api_rest(incident_data, context)
                    if obs_api:
                        observations.extend(obs_api)
                
                elif source == SourceDonnees.BASE_DONNEES:
                    obs_db = await self.collecteur_reel.collecter_base_donnees(incident_data, context)
                    if obs_db:
                        observations.extend(obs_db)
                
                # Autres sources possibles...
                
            except Exception as e:
                logger.warning(f"‚ö†Ô∏è Erreur source {source.value}: {e}")
                continue
        
        return observations
    
    async def _create_hybrid_result(self, 
                                  observations_reelles: List[ObservationTerrain],
                                  incident_data: Dict, 
                                  context: Dict) -> Dict:
        """Cr√©ation r√©sultat hybride"""
        
        # G√©n√©ration synth√©tique compl√©mentaire
        secteur = self._extract_secteur_from_incident(incident_data)
        qualite_culture = self._estimate_culture_quality(context)
        
        observation_synthetique = self.generateur_synthetique.generate_observation_synthetique(
            secteur=secteur,
            qualite_culture=qualite_culture
        )
        
        # Fusion via moteur hybride
        poids_reel = min(0.8, 0.3 + (len(observations_reelles) * 0.1))  # Plus de donn√©es r√©elles = plus de poids
        
        return self.moteur_fusion.fusionner_observations(
            observations_reelles,
            observation_synthetique,
            poids_reel
        )
    
    def _format_real_data_result(self, observations: List[ObservationTerrain]) -> Dict:
        """Formatage r√©sultat donn√©es r√©elles"""
        
        # Agr√©gation observations r√©elles
        variables_agregees = self.moteur_fusion._agreger_variables_reelles(observations)
        
        variables_culture_terrain = {}
        for var, score in variables_agregees.items():
            variables_culture_terrain[var] = {
                "score": round(score, 1),
                "source": "observation_reelle",
                "observations": len(observations),
                "sources": list(set(obs.source.value for obs in observations))
            }
        
        # M√©triques moyennes
        score_comportement = int(sum(variables_agregees.values()) / len(variables_agregees) * 10) if variables_agregees else 50
        
        # Conformit√© moyenne
        conformites = [obs.conformite_epi.get("taux_conformite", 50) for obs in observations]
        conformite_avg = sum(conformites) / len(conformites) if conformites else 50
        
        # Dangers agr√©g√©s
        all_dangers = set()
        for obs in observations:
            all_dangers.update(obs.dangers_detectes)
        
        return {
            "agent_id": "A2_REAL",
            "confidence_score": self.config.min_confidence_real_data,
            "variables_culture_terrain": variables_culture_terrain,
            "observations": {
                "score_comportement": score_comportement,
                "dangers_detectes": len(all_dangers),
                "conformite_procedures": conformite_avg,
                "source_type": "donnees_reelles"
            },
            "contexte_observation": {
                "nombre_observations": len(observations),
                "sources_utilisees": list(set(obs.source.value for obs in observations)),
                "periode_collecte": self._get_periode_observations(observations),
                "qualite_donnees": "EXCELLENTE" if len(observations) >= 5 else "BONNE"
            },
            "data_source": "real",
            "real_data_details": {
                "observations_count": len(observations),
                "average_confidence": sum(obs.confidence_score for obs in observations) / len(observations),
                "entreprises_sources": list(set(obs.entreprise for obs in observations)),
                "dangers_uniques": list(all_dangers)
            }
        }
    
    def _format_synthetic_data_result(self, observation: Dict, incident_data: Dict, context: Dict) -> Dict:
        """Formatage r√©sultat donn√©es synth√©tiques"""
        
        variables_terrain = {}
        for var, score in observation["variables_culture"].items():
            variables_terrain[var] = {
                "score": score,
                "source": "observation_synthetique",
                "observations": observation["contexte"]["nb_travailleurs_observes"],
                "base_statistiques": "CNESST_793K"
            }
        
        conformite = observation["conformite"]
        conformite_epi_pct = conformite.get("taux_conformite", 50)
        
        return {
            "agent_id": "A2_SYNTHETIC",
            "confidence_score": 0.75,
            "variables_culture_terrain": variables_terrain,
            "observations": {
                "score_comportement": int(sum(observation["variables_culture"].values()) / len(observation["variables_culture"]) * 10),
                "dangers_detectes": len(conformite["dangers"]),
                "epi_analyses": conformite["epi_analyses"],
                "epi_obligatoires": len(conformite["epi_types"]),
                "conformite_procedures": conformite_epi_pct,
                "incidents_potentiels": 1 if conformite_epi_pct < 50 else 0
            },
            "contexte_observation": {
                "duree_observation": f"{observation['contexte']['duree_observation']:.1f} heures",
                "nombre_travailleurs": observation["contexte"]["nb_travailleurs_observes"],
                "type_source": "donnees_synthetiques_cnesst",
                "conditions_meteo": observation["contexte"]["conditions_meteo"],
                "entreprise": observation["contexte"]["entreprise"]
            },
            "data_source": "synthetic",
            "synthetic_details": {
                "secteur_base": observation["contexte"]["secteur_activite"],
                "qualite_culture_cible": observation["meta_generation"]["qualite_culture_cible"],
                "type_incident_base": observation["meta_generation"].get("type_incident_base"),
                "seed_utilise": observation["meta_generation"]["seed_utilise"],
                "base_statistiques": "CNESST_793K_incidents"
            }
        }
    
    # M√©thodes utilitaires
    def _validate_input_data(self, incident_data: Dict, context: Dict):
        """Validation donn√©es d'entr√©e"""
        if not incident_data:
            raise ValueError("Donn√©es incident manquantes")
        
        required_fields = ["ID"]
        for field in required_fields:
            if field not in incident_data:
                raise ValueError(f"Champ incident manquant: {field}")
    
    def _extract_secteur_from_incident(self, incident_data: Dict) -> Optional[SecteurActivite]:
        """Extraction secteur depuis donn√©es incident"""
        secteur_str = incident_data.get("SECTEUR_SCIAN", "").upper()
        
        mapping = {
            "CONSTRUCTION": SecteurActivite.CONSTRUCTION,
            "SOINS": SecteurActivite.SOINS_SANTE,
            "SANTE": SecteurActivite.SOINS_SANTE,
            "FABRICATION": SecteurActivite.FABRICATION,
            "TRANSPORT": SecteurActivite.TRANSPORT,
            "SERVICE": SecteurActivite.SERVICES
        }
        
        for key, secteur in mapping.items():
            if key in secteur_str:
                return secteur
        
        return SecteurActivite.AUTRE
    
    def _extract_type_incident_from_data(self, incident_data: Dict) -> Optional[TypeIncident]:
        """Extraction type incident"""
        genre = incident_data.get("GENRE", "").upper()
        
        mapping = {
            "CHUTE DE HAUTEUR": TypeIncident.CHUTE_HAUTEUR,
            "CHUTE AU MEME NIVEAU": TypeIncident.CHUTE_NIVEAU,
            "FRAPPE": TypeIncident.FRAPPE_OBJET,
            "EFFORT EXCESSIF": TypeIncident.EFFORT_EXCESSIF,
            "CONTACT": TypeIncident.CONTACT_OBJET
        }
        
        for key, type_inc in mapping.items():
            if key in genre:
                return type_inc
        
        return TypeIncident.AUTRE
    
    def _estimate_culture_quality(self, context: Dict) -> Optional[str]:
        """Estimation qualit√© culture selon contexte"""
        if not context:
            return "moyenne"
        
        score = 0
        
        # Facteurs positifs
        budget = context.get("budget_sst_annuel", 0)
        if budget > 100000:
            score += 3
        elif budget > 50000:
            score += 2
        elif budget > 25000:
            score += 1
        
        # Incidents r√©cents (n√©gatif)
        incidents = context.get("incidents_recents", 0)
        if incidents == 0:
            score += 2
        elif incidents <= 2:
            score += 1
        elif incidents >= 5:
            score -= 2
        
        # Formation r√©cente
        if context.get("formation_recente_sst", False):
            score += 1
        
        # Certification
        if context.get("certification_sst"):
            score += 1
        
        # Classification
        if score >= 5:
            return "excellente"
        elif score >= 3:
            return "bonne"
        elif score >= 1:
            return "moyenne"
        else:
            return "faible"
    
    def _generate_cache_key(self, incident_data: Dict, context: Dict) -> str:
        """G√©n√©ration cl√© cache"""
        key_parts = [
            incident_data.get("SECTEUR_SCIAN", ""),
            incident_data.get("GENRE", ""),
            str(context.get("nom_entreprise", "") if context else ""),
            self.config.mode_collecte.value
        ]
        return "_".join(key_parts).replace(" ", "_").lower()
    
    def _get_periode_observations(self, observations: List[ObservationTerrain]) -> Dict:
        """P√©riode des observations collect√©es"""
        if not observations:
            return {}
        
        dates = [obs.timestamp for obs in observations]
        return {
            "plus_ancienne": min(dates).isoformat(),
            "plus_recente": max(dates).isoformat(),
            "jours_couverture": (max(dates) - min(dates)).days
        }
    
    # M√©thodes de configuration
    def get_config_info(self) -> Dict:
        """Information configuration courante"""
        return {
            "mode_collecte": self.config.mode_collecte.value,
            "sources_prioritaires": [s.value for s in self.config.sources_prioritaires],
            "fallback_synthetique": self.config.fallback_to_synthetic,
            "cache_active": self.config.cache_enabled,
            "timeout_sources": self.config.timeout_seconds,
            "generateur_disponible": self.generateur_synthetique is not None,
            "version_agent": self.version
        }
    
    def update_config(self, **kwargs):
        """Mise √† jour configuration dynamique"""
        old_mode = self.config.mode_collecte
        
        for key, value in kwargs.items():
            if hasattr(self.config, key):
                if key == "mode_collecte" and isinstance(value, str):
                    value = ModeCollecteDonnees(value)
                setattr(self.config, key, value)
        
        new_mode = self.config.mode_collecte
        
        if old_mode != new_mode:
            logger.info(f"üîÑ Mode chang√©: {old_mode.value} ‚Üí {new_mode.value}")
        
        # R√©initialisation composants si n√©cessaire
        if kwargs.get("sources_prioritaires"):
            self.collecteur_reel = CollecteurDonneesReelles(self.config)
    
    def clear_cache(self):
        """Vider cache observations"""
        if self.cache_observations:
            self.cache_observations.clear()
            logger.info("üóëÔ∏è Cache observations vid√©")
    
    def get_statistics(self) -> Dict:
        """Statistiques d'utilisation"""
        stats = {
            "cache_size": len(self.cache_observations) if self.cache_observations else 0,
            "config_actuelle": self.get_config_info(),
            "version": self.version
        }
        
        return stats


# ==========================================
# FONCTIONS DE TEST ET D√âMONSTRATION
# ==========================================

async def test_agent_a2_configurable_complet():
    """Test complet Agent A2 configurable"""
    
    print("üß™ TEST AGENT A2 CONFIGURABLE COMPLET")
    print("=" * 45)
    
    # Donn√©es test
    incident_test = {
        "ID": 123456,
        "SECTEUR_SCIAN": "CONSTRUCTION",
        "GENRE": "CHUTE DE HAUTEUR...",
        "NATURE_LESION": "TRAUMA OS...",
        "SIEGE_LESION": "COLONNE VERTEBRALE..."
    }
    
    context_test = {
        "nom_entreprise": "Construction ABC Inc.",
        "budget_sst_annuel": 45000,
        "incidents_recents": 2,
        "formation_recente_sst": True,
        "certification_sst": "ISO 45001"
    }
    
    # Test diff√©rents modes
    modes_test = [
        (ModeCollecteDonnees.SYNTHETIQUE_UNIQUEMENT, "üî¨ SYNTH√âTIQUE"),
        (ModeCollecteDonnees.HYBRIDE_AUTO, "üîÑ HYBRIDE AUTO"),
        (ModeCollecteDonnees.DEMO_MODE, "üé≠ D√âMO")
    ]
    
    for mode, nom_mode in modes_test:
        print(f"\n{nom_mode}")
        print("-" * 35)
        
        # Configuration pour ce mode
        config = ConfigurationA2(
            mode_collecte=mode,
            fallback_to_synthetic=True,
            timeout_seconds=2.0,
            synthetic_seed=42
        )
        
        # Initialisation agent
        agent = AgentA2Configurable(config)
        
        try:
            # Ex√©cution
            result = await agent.process(incident_test, context_test)
            
            # Affichage r√©sultats
            if "error" in result:
                print(f"‚ùå Erreur: {result['error']}")
            else:
                print(f"‚úÖ Succ√®s - Source: {result.get('data_source', 'unknown')}")
                print(f"   üìä Score comportement: {result['observations']['score_comportement']}/100")
                print(f"   ‚ö†Ô∏è Dangers: {result['observations']['dangers_detectes']}")
                print(f"   üõ°Ô∏è Conformit√©: {result['observations']['conformite_procedures']:.1f}%")
                print(f"   ‚úÖ Confiance: {result.get('confidence_score', 0):.2f}")
                
                # D√©tails sp√©ciaux selon source
                if result.get('data_source') == 'hybrid_fusion':
                    fusion = result.get('fusion_details', {})
                    print(f"   üîó Fusion: {fusion.get('nb_observations_reelles', 0)} obs. r√©elles")
                    print(f"   üèÜ Qualit√© fusion: {fusion.get('qualite_fusion', 'N/A')}")
                
                elif result.get('data_source') == 'synthetic':
                    details = result.get('synthetic_details', {})
                    print(f"   üî¨ Qualit√© culture: {details.get('qualite_culture_cible', 'N/A')}")
                    print(f"   üìà Base: {details.get('base_statistiques', 'N/A')}")
                
                # Performance
                perf = result.get("agent_info", {}).get("performance_time", 0)
                print(f"   ‚è±Ô∏è Performance: {perf:.3f}s")
        
        except Exception as e:
            print(f"‚ùå Erreur test: {e}")
    
    print(f"\nüéâ TESTS AGENT A2 CONFIGURABLE TERMIN√âS !")
    print("=" * 45)
    print("‚úÖ Syst√®me hybride op√©rationnel")
    print("üîÑ Configuration dynamique valid√©e")
    print("‚ö° Fallback automatique fonctionnel")

async def demo_configuration_dynamique():
    """D√©monstration configuration dynamique"""
    
    print("\nüéõÔ∏è D√âMONSTRATION CONFIGURATION DYNAMIQUE")
    print("=" * 50)
    
    # Agent avec config initiale
    agent = AgentA2Configurable(ConfigurationA2(
        mode_collecte=ModeCollecteDonnees.SYNTHETIQUE_UNIQUEMENT
    ))
    
    incident_simple = {
        "ID": 999,
        "SECTEUR_SCIAN": "FABRICATION",
        "GENRE": "CONTACT MACHINE"
    }
    
    print("üîß Configuration initiale:")
    config_info = agent.get_config_info()
    print(f"   Mode: {config_info['mode_collecte']}")
    print(f"   Fallback: {config_info['fallback_synthetique']}")
    
    # Test avec config initiale
    result1 = await agent.process(incident_simple)
    print(f"   ‚úÖ R√©sultat: {result1.get('data_source', 'unknown')}")
    
    # Changement configuration √† chaud
    print("\nüîÑ Changement configuration √† chaud...")
    agent.update_config(
        mode_collecte="hybride_auto",
        timeout_seconds=1.0
    )
    
    print("üîß Nouvelle configuration:")
    config_info = agent.get_config_info()
    print(f"   Mode: {config_info['mode_collecte']}")
    print(f"   Timeout: {config_info['timeout_sources']}s")
    
    # Test avec nouvelle config
    result2 = await agent.process(incident_simple)
    print(f"   ‚úÖ R√©sultat: {result2.get('data_source', 'unknown')}")
    
    # Statistiques
    stats = agent.get_statistics()
    print(f"\nüìä Statistiques:")
    print(f"   Cache: {stats['cache_size']} entr√©es")
    print(f"   Version: {stats['version']}")

if __name__ == "__main__":
    print("üöÄ LANCEMENT AGENT A2 CONFIGURABLE COMPLET")
    print("=" * 50)
    
    try:
        # Test principal
        asyncio.run(test_agent_a2_configurable_complet())
        
        # Demo configuration
        asyncio.run(demo_configuration_dynamique())
        
        print(f"\nüèÜ VALIDATION COMPL√àTE R√âUSSIE !")
        print("=" * 40)
        print("‚úÖ Agent A2 Configurable op√©rationnel")
        print("üîÑ Syst√®me hybride fonctionnel")
        print("‚ö° Configuration dynamique valid√©e")
        print("üî¨ Int√©gration g√©n√©rateur synth√©tique parfaite")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        print("üîß V√©rifiez que le g√©n√©rateur synth√©tique est disponible")