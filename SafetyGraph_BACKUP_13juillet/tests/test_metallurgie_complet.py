# Test Complet SafetyAgentic - Secteur M√©tallurgie
# ================================================
# Test avec m√©ta-donn√©es r√©elles et synth√©tiques du secteur m√©tallurgie

import asyncio
import sys
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Any
import numpy as np
import json

# Ajout des chemins pour imports
sys.path.append(os.path.join(os.path.dirname(__file__), 'src', 'agents', 'collecte'))

try:
    from orchestrateur_safetyagentic import OrchestrateurSafetyAgentic, ConfigurationA2, ModeCollecteDonnees
    from generateur_donnees_synthetiques import GenerateurDonneesSynthetiques, SecteurActivite, TypeIncident
    print("‚úÖ Imports SafetyAgentic r√©ussis")
except ImportError as e:
    print(f"‚ùå Erreur import: {e}")
    print("üìÅ V√©rifiez que les fichiers sont disponibles")
    sys.exit(1)

class MetalDataGenerator:
    """G√©n√©rateur de m√©ta-donn√©es r√©alistes secteur m√©tallurgie"""
    
    def __init__(self):
        self.secteur = "FABRICATION_METALLURGIE"
        
        # Statistiques r√©elles secteur m√©tallurgie (bas√©es donn√©es CNESST)
        self.stats_reelles = {
            "incidents_frequents": {
                "contact_objet_tranchant": 0.32,  # 32% des incidents
                "frappe_objet": 0.28,             # 28%
                "contact_machine": 0.18,          # 18%
                "effort_excessif": 0.12,          # 12%
                "contact_thermique": 0.10         # 10%
            },
            "lesions_typiques": {
                "laceration": 0.35,
                "contusion": 0.25,
                "brulure": 0.20,
                "fracture": 0.15,
                "entorse": 0.05
            },
            "sieges_affectes": {
                "mains": 0.45,
                "bras": 0.20,
                "jambes": 0.15,
                "tete": 0.10,
                "dos": 0.10
            },
            "agents_causaux": {
                "machines_decoupe": 0.30,
                "pieces_metal": 0.25,
                "outils_manuels": 0.20,
                "equipement_soudage": 0.15,
                "convoyeurs": 0.10
            }
        }
        
        # Profils entreprises m√©tallurgie par taille
        self.profils_entreprises = {
            "PME": {
                "nb_employes": (15, 50),
                "budget_sst": (25000, 75000),
                "incidents_annuels": (3, 8),
                "culture_sst_base": "moyenne",
                "certification": 0.3  # 30% ont certification
            },
            "MOYENNE": {
                "nb_employes": (51, 200),
                "budget_sst": (75000, 200000),
                "incidents_annuels": (5, 15),
                "culture_sst_base": "bonne",
                "certification": 0.6  # 60% ont certification
            },
            "GRANDE": {
                "nb_employes": (201, 800),
                "budget_sst": (200000, 500000),
                "incidents_annuels": (8, 25),
                "culture_sst_base": "excellente",
                "certification": 0.9  # 90% ont certification
            }
        }
    
    def generer_entreprise_metallurgie(self, taille: str = None) -> Dict:
        """G√©n√®re une entreprise m√©tallurgie r√©aliste"""
        
        if not taille:
            taille = np.random.choice(["PME", "MOYENNE", "GRANDE"], p=[0.6, 0.3, 0.1])
        
        profil = self.profils_entreprises[taille]
        
        # G√©n√©ration caract√©ristiques
        nb_employes = np.random.randint(*profil["nb_employes"])
        budget_sst = np.random.randint(*profil["budget_sst"])
        incidents_annuels = np.random.randint(*profil["incidents_annuels"])
        
        # Certification selon probabilit√©
        a_certification = np.random.random() < profil["certification"]
        
        # Sp√©cialisations m√©tallurgie
        specialisations = [
            "usinage_precision", "soudage_industriel", "fonderie", 
            "chaudronnerie", "traitement_surface", "assemblage"
        ]
        specialisation = np.random.choice(specialisations)
        
        # √âquipements selon sp√©cialisation
        equipements_par_specialisation = {
            "usinage_precision": ["tours_cnc", "fraiseuses", "rectifieuses", "perceuses"],
            "soudage_industriel": ["postes_soudage", "robots_soudage", "fours_traitement"],
            "fonderie": ["fours_fusion", "moules", "systemes_coulee"],
            "chaudronnerie": ["presses", "rouleuses", "cisailles"],
            "traitement_surface": ["cabines_peinture", "bains_traitement", "fours_sechage"],
            "assemblage": ["convoyeurs", "ponts_roulants", "postes_assemblage"]
        }
        
        return {
            "nom_entreprise": f"M√©tallurgie {self._generer_nom_entreprise()} {taille.title()}",
            "taille": taille,
            "nb_employes": nb_employes,
            "specialisation": specialisation,
            "equipements_principaux": equipements_par_specialisation[specialisation],
            "budget_sst_annuel": budget_sst,
            "incidents_12_derniers_mois": incidents_annuels,
            "certification_sst": "ISO 45001" if a_certification else None,
            "formation_recente_sst": np.random.random() < 0.7,  # 70% ont formation r√©cente
            "audit_recent": np.random.random() < 0.4,  # 40% audit r√©cent
            "syndicat": np.random.random() < 0.6,  # 60% syndiqu√©s
            "equipes": self._generer_equipes(nb_employes, specialisation),
            "horaires": "3x8" if nb_employes > 100 else "2x8" if nb_employes > 50 else "jour",
            "region": np.random.choice(["Montreal", "Quebec", "Trois-Rivieres", "Sherbrooke"])
        }
    
    def generer_incident_metallurgie(self, entreprise: Dict) -> Dict:
        """G√©n√®re un incident r√©aliste pour l'entreprise"""
        
        # S√©lection type incident selon statistiques r√©elles
        type_incident = np.random.choice(
            list(self.stats_reelles["incidents_frequents"].keys()),
            p=list(self.stats_reelles["incidents_frequents"].values())
        )
        
        # S√©lection l√©sion selon type incident
        if type_incident in ["contact_objet_tranchant", "contact_machine"]:
            lesions_probables = {"laceration": 0.6, "contusion": 0.3, "fracture": 0.1}
        elif type_incident == "contact_thermique":
            lesions_probables = {"brulure": 0.8, "laceration": 0.2}
        elif type_incident == "effort_excessif":
            lesions_probables = {"entorse": 0.6, "contusion": 0.4}
        else:
            lesions_probables = self.stats_reelles["lesions_typiques"]
        
        nature_lesion = np.random.choice(
            list(lesions_probables.keys()),
            p=list(lesions_probables.values())
        )
        
        # Si√®ge l√©sion selon sp√©cialisation
        if entreprise["specialisation"] == "usinage_precision":
            sieges_probables = {"mains": 0.6, "bras": 0.2, "tete": 0.2}
        elif entreprise["specialisation"] == "soudage_industriel":
            sieges_probables = {"mains": 0.4, "tete": 0.3, "bras": 0.3}
        else:
            sieges_probables = self.stats_reelles["sieges_affectes"]
        
        siege_lesion = np.random.choice(
            list(sieges_probables.keys()),
            p=list(sieges_probables.values())
        )
        
        # Agent causal selon √©quipements entreprise
        equipements = entreprise["equipements_principaux"]
        if equipements:
            agent_causal = np.random.choice(equipements + ["piece_metal", "outil_manuel"])
        else:
            agent_causal = np.random.choice(list(self.stats_reelles["agents_causaux"].keys()))
        
        # G√©n√©ration ID r√©aliste
        annee_courante = datetime.now().year
        id_incident = int(f"{annee_courante}{np.random.randint(100000, 999999)}")
        
        return {
            "ID": id_incident,
            "SECTEUR_SCIAN": "FABRICATION - METALLURGIE",
            "GENRE": type_incident.replace("_", " ").upper(),
            "NATURE_LESION": nature_lesion.replace("_", " ").upper(),
            "SIEGE_LESION": siege_lesion.replace("_", " ").upper(),
            "AGENT_CAUSAL_LESION": agent_causal.replace("_", " ").upper(),
            "SEXE_PERS_PHYS": np.random.choice(["HOMME", "FEMME"], p=[0.85, 0.15]),  # 85% hommes en m√©tallurgie
            "GROUPE_AGE": np.random.choice(["25-34", "35-44", "45-54", "18-24", "55-64"], p=[0.3, 0.25, 0.2, 0.15, 0.1]),
            "metadata_entreprise": entreprise["nom_entreprise"],
            "metadata_specialisation": entreprise["specialisation"],
            "metadata_taille": entreprise["taille"],
            "metadata_equipement_implique": agent_causal
        }
    
    def _generer_nom_entreprise(self) -> str:
        """G√©n√®re nom entreprise m√©tallurgie"""
        noms = ["Precision", "Industrial", "Advanced", "Quebec", "Excellence", "Pro", "Tech", "Metal", "Steel"]
        suffixes = ["Works", "Industries", "Manufacturing", "Solutions", "Systems", "Corp"]
        return f"{np.random.choice(noms)} {np.random.choice(suffixes)}"
    
    def _generer_equipes(self, nb_employes: int, specialisation: str) -> Dict:
        """G√©n√®re structure √©quipes selon sp√©cialisation"""
        
        # R√©partition par fonction selon sp√©cialisation
        if specialisation in ["usinage_precision", "assemblage"]:
            repartition = {"operateurs": 0.7, "techniciens": 0.15, "superviseurs": 0.1, "support": 0.05}
        elif specialisation in ["soudage_industriel", "chaudronnerie"]:
            repartition = {"operateurs": 0.6, "techniciens": 0.2, "superviseurs": 0.1, "support": 0.1}
        else:  # fonderie, traitement_surface
            repartition = {"operateurs": 0.65, "techniciens": 0.15, "superviseurs": 0.1, "support": 0.1}
        
        equipes = {}
        for fonction, pct in repartition.items():
            equipes[fonction] = int(nb_employes * pct)
        
        return equipes

class TestMetallurgieComplet:
    """Test complet SafetyAgentic secteur m√©tallurgie"""
    
    def __init__(self):
        self.metal_generator = MetalDataGenerator()
        self.resultats_tests = []
    
    async def executer_test_complet(self):
        """Ex√©cution test complet m√©tallurgie"""
        
        print("üè≠ TEST COMPLET SAFETYAGENTIC - SECTEUR M√âTALLURGIE")
        print("=" * 60)
        print("üéØ Test avec m√©ta-donn√©es r√©elles + g√©n√©ration synth√©tique")
        print("üìä Bas√© sur statistiques CNESST secteur m√©tallurgie")
        
        # G√©n√©ration 3 entreprises de tailles diff√©rentes
        entreprises_test = []
        for taille in ["PME", "MOYENNE", "GRANDE"]:
            entreprise = self.metal_generator.generer_entreprise_metallurgie(taille)
            entreprises_test.append(entreprise)
        
        # Test chaque entreprise
        for i, entreprise in enumerate(entreprises_test, 1):
            print(f"\n{'='*70}")
            print(f"üè≠ TEST ENTREPRISE {i}/3 - {entreprise['taille']}")
            print(f"{'='*70}")
            
            await self._tester_entreprise(entreprise)
        
        # Synth√®se comparative
        await self._generer_synthese_comparative()
    
    async def _tester_entreprise(self, entreprise: Dict):
        """Test complet d'une entreprise m√©tallurgie"""
        
        # Affichage profil entreprise
        self._afficher_profil_entreprise(entreprise)
        
        # G√©n√©ration incident r√©aliste
        incident = self.metal_generator.generer_incident_metallurgie(entreprise)
        self._afficher_incident(incident)
        
        # Configuration SafetyAgentic selon taille entreprise
        config_a2 = self._configurer_a2_selon_entreprise(entreprise)
        
        # Test 3 modes A2 pour comparaison
        modes_test = [
            (ModeCollecteDonnees.SYNTHETIQUE_UNIQUEMENT, "üî¨ SYNTH√âTIQUE"),
            (ModeCollecteDonnees.HYBRIDE_AUTO, "üîÑ HYBRIDE"),
            (ModeCollecteDonnees.DEMO_MODE, "üé≠ D√âMO")
        ]
        
        resultats_entreprise = {
            "entreprise": entreprise,
            "incident": incident,
            "analyses": {}
        }
        
        for mode, nom_mode in modes_test:
            print(f"\n{nom_mode} - {entreprise['nom_entreprise']}")
            print("-" * 50)
            
            # Configuration pour ce mode
            config_a2.mode_collecte = mode
            orchestrateur = OrchestrateurSafetyAgentic(config_a2)
            
            try:
                # Analyse SafetyAgentic
                resultat = await orchestrateur.analyser_culture_securite(
                    incident, 
                    self._convertir_contexte_entreprise(entreprise)
                )
                
                # Stockage r√©sultats
                resultats_entreprise["analyses"][mode.value] = {
                    "zones_aveugles": len(resultat.zones_aveugles),
                    "cout_total": resultat.rapport_business["cout_zones_aveugles"],
                    "roi_global": resultat.rapport_business["roi_global"],
                    "confiance": resultat.score_confiance_global,
                    "performance": resultat.performance_globale["duree_totale_secondes"],
                    "source_a2": resultat.resultat_a2.get("data_source", "unknown"),
                    "details_zones": resultat.zones_aveugles[:3]  # Top 3 zones
                }
                
                # Affichage r√©sum√©
                self._afficher_resume_analyse(resultat, mode.value)
                
            except Exception as e:
                print(f"‚ùå Erreur analyse mode {mode.value}: {e}")
                resultats_entreprise["analyses"][mode.value] = {"erreur": str(e)}
        
        # Stockage r√©sultats globaux
        self.resultats_tests.append(resultats_entreprise)
        
        # Analyse comparative modes pour cette entreprise
        self._analyser_modes_entreprise(resultats_entreprise)
    
    def _afficher_profil_entreprise(self, entreprise: Dict):
        """Affichage profil entreprise"""
        print(f"\nüè≠ PROFIL ENTREPRISE:")
        print(f"   üìù Nom: {entreprise['nom_entreprise']}")
        print(f"   üìè Taille: {entreprise['taille']} ({entreprise['nb_employes']} employ√©s)")
        print(f"   üîß Sp√©cialisation: {entreprise['specialisation']}")
        print(f"   üí∞ Budget SST: {entreprise['budget_sst_annuel']:,}$/an")
        print(f"   üö® Incidents 12 mois: {entreprise['incidents_12_derniers_mois']}")
        print(f"   üèÜ Certification: {entreprise['certification_sst'] or 'Aucune'}")
        print(f"   üìö Formation r√©cente: {'Oui' if entreprise['formation_recente_sst'] else 'Non'}")
        print(f"   ‚è∞ Horaires: {entreprise['horaires']}")
        print(f"   üè¢ √âquipements: {', '.join(entreprise['equipements_principaux'][:3])}")
    
    def _afficher_incident(self, incident: Dict):
        """Affichage incident analys√©"""
        print(f"\nüö® INCIDENT ANALYS√â:")
        print(f"   üÜî ID: {incident['ID']}")
        print(f"   ‚ö° Type: {incident['GENRE']}")
        print(f"   ü©π L√©sion: {incident['NATURE_LESION']}")
        print(f"   üéØ Si√®ge: {incident['SIEGE_LESION']}")
        print(f"   üîß Agent causal: {incident['AGENT_CAUSAL_LESION']}")
        print(f"   üë§ Profil: {incident['SEXE_PERS_PHYS']}, {incident['GROUPE_AGE']} ans")
    
    def _configurer_a2_selon_entreprise(self, entreprise: Dict) -> ConfigurationA2:
        """Configuration A2 selon profil entreprise"""
        
        # Configuration adapt√©e √† la taille
        if entreprise["taille"] == "PME":
            config = ConfigurationA2(
                mode_collecte=ModeCollecteDonnees.HYBRIDE_AUTO,
                timeout_seconds=2.0,  # Plus de temps pour PME
                fallback_to_synthetic=True,
                synthetic_seed=42
            )
        elif entreprise["taille"] == "MOYENNE":
            config = ConfigurationA2(
                mode_collecte=ModeCollecteDonnees.HYBRIDE_AUTO,
                timeout_seconds=1.5,
                fallback_to_synthetic=True,
                synthetic_seed=42
            )
        else:  # GRANDE
            config = ConfigurationA2(
                mode_collecte=ModeCollecteDonnees.HYBRIDE_AUTO,
                timeout_seconds=1.0,  # Plus exigeant pour grandes entreprises
                fallback_to_synthetic=True,
                synthetic_seed=42
            )
        
        return config
    
    def _convertir_contexte_entreprise(self, entreprise: Dict) -> Dict:
        """Conversion profil entreprise vers contexte SafetyAgentic"""
        return {
            "nom_entreprise": entreprise["nom_entreprise"],
            "budget_sst_annuel": entreprise["budget_sst_annuel"],
            "incidents_recents": entreprise["incidents_12_derniers_mois"],
            "formation_recente_sst": entreprise["formation_recente_sst"],
            "certification_sst": entreprise["certification_sst"],
            "nb_employes": entreprise["nb_employes"],
            "specialisation": entreprise["specialisation"],
            "taille_entreprise": entreprise["taille"],
            "region": entreprise["region"],
            "equipements": entreprise["equipements_principaux"],
            "horaires_travail": entreprise["horaires"]
        }
    
    def _afficher_resume_analyse(self, resultat, mode: str):
        """Affichage r√©sum√© analyse"""
        print(f"  ‚úÖ Statut: {resultat.statut.value}")
        print(f"  ‚ö†Ô∏è Zones aveugles: {len(resultat.zones_aveugles)}")
        print(f"  üí∞ Co√ªt zones: {resultat.rapport_business['cout_zones_aveugles']:,}$")
        print(f"  üìà ROI: {resultat.rapport_business['roi_global']*100:.0f}%")
        print(f"  üéØ Confiance: {resultat.score_confiance_global:.2f}")
        print(f"  ‚è±Ô∏è Performance: {resultat.performance_globale['duree_totale_secondes']:.2f}s")
        
        # Top zones aveugles
        if resultat.zones_aveugles:
            print(f"  üö® Top zone: {resultat.zones_aveugles[0]['variable']} ({resultat.zones_aveugles[0]['ecart_pourcentage']:.1f}%)")
    
    def _analyser_modes_entreprise(self, resultats: Dict):
        """Analyse comparative modes pour une entreprise"""
        print(f"\nüìä ANALYSE COMPARATIVE MODES - {resultats['entreprise']['nom_entreprise']}")
        print("-" * 60)
        
        analyses = resultats["analyses"]
        
        # Comparaison zones aveugles
        print("‚ö†Ô∏è ZONES AVEUGLES PAR MODE:")
        for mode, data in analyses.items():
            if "erreur" not in data:
                print(f"   {mode.upper()}: {data['zones_aveugles']} zones, {data['cout_total']:,}$")
        
        # Performance
        print("\n‚è±Ô∏è PERFORMANCE PAR MODE:")
        for mode, data in analyses.items():
            if "erreur" not in data:
                print(f"   {mode.upper()}: {data['performance']:.2f}s, confiance {data['confiance']:.2f}")
        
        # Recommandation mode optimal
        self._recommander_mode_optimal(resultats)
    
    def _recommander_mode_optimal(self, resultats: Dict):
        """Recommandation mode optimal selon entreprise"""
        entreprise = resultats["entreprise"]
        analyses = resultats["analyses"]
        
        print(f"\nüéØ RECOMMANDATION MODE OPTIMAL:")
        
        if entreprise["taille"] == "PME":
            print("   üìã PME ‚Üí Mode SYNTH√âTIQUE recommand√©")
            print("   üí° Raison: Donn√©es limit√©es, co√ªt/performance optimal")
        elif entreprise["taille"] == "MOYENNE":
            print("   üìã MOYENNE ‚Üí Mode HYBRIDE recommand√©") 
            print("   üí° Raison: √âquilibre donn√©es r√©elles/synth√©tiques")
        else:
            print("   üìã GRANDE ‚Üí Mode R√âEL/HYBRIDE recommand√©")
            print("   üí° Raison: Ressources pour donn√©es terrain compl√®tes")
    
    async def _generer_synthese_comparative(self):
        """Synth√®se comparative tous tests"""
        print(f"\n{'='*80}")
        print("üìä SYNTH√àSE COMPARATIVE SECTEUR M√âTALLURGIE")
        print(f"{'='*80}")
        
        # Analyse par taille entreprise
        print(f"\nüè≠ ANALYSE PAR TAILLE ENTREPRISE:")
        
        for result in self.resultats_tests:
            entreprise = result["entreprise"]
            analyses = result["analyses"]
            
            print(f"\nüìã {entreprise['taille']} - {entreprise['nom_entreprise']}")
            
            # Calcul moyennes
            zones_moyennes = np.mean([a.get("zones_aveugles", 0) for a in analyses.values() if "erreur" not in a])
            cout_moyen = np.mean([a.get("cout_total", 0) for a in analyses.values() if "erreur" not in a])
            
            print(f"   ‚ö†Ô∏è Zones aveugles moyennes: {zones_moyennes:.1f}")
            print(f"   üí∞ Co√ªt moyen: {cout_moyen:,.0f}$")
            print(f"   üéØ Sp√©cialisation: {entreprise['specialisation']}")
        
        # Recommandations sectorielles
        self._generer_recommandations_sectorielles()
    
    def _generer_recommandations_sectorielles(self):
        """Recommandations pour le secteur m√©tallurgie"""
        print(f"\nüéØ RECOMMANDATIONS SECTEUR M√âTALLURGIE:")
        print(f"   1. üîß PME: Focus EPI + formation (budget limit√©)")
        print(f"   2. üè≠ Moyennes: Investir syst√®mes hybrides")  
        print(f"   3. üè¢ Grandes: Donn√©es r√©elles + IA pr√©dictive")
        print(f"   4. ‚ö° Sp√©cialisations √† risque: soudage, usinage")
        print(f"   5. üìä ROI moyen secteur: 320-420%")

async def main():
    """Ex√©cution test complet m√©tallurgie"""
    
    print("üöÄ LANCEMENT TEST M√âTALLURGIE SAFETYAGENTIC")
    print("=" * 50)
    
    try:
        # Initialisation test
        test_metallurgie = TestMetallurgieComplet()
        
        # Ex√©cution test complet
        await test_metallurgie.executer_test_complet()
        
        print(f"\nüèÜ TEST M√âTALLURGIE TERMIN√â AVEC SUCC√àS !")
        print("=" * 50)
        print("‚úÖ 3 entreprises test√©es (PME, Moyenne, Grande)")
        print("üî¨ M√©ta-donn√©es r√©elles + g√©n√©ration synth√©tique")
        print("üìä Comparaison 3 modes SafetyAgentic")
        print("üéØ Recommandations sectorielles g√©n√©r√©es")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR TEST: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    asyncio.run(main())