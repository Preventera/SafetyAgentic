# G√©n√©rateur Donn√©es Synth√©tiques A2 - SafetyAgentic (VERSION CORRIG√âE)
# =====================================================================
# G√©n√®re des observations terrain r√©alistes bas√©es sur statistiques CNESST

import numpy as np
import pandas as pd
from datetime import datetime, timedelta
from typing import Dict, List, Optional, Tuple, Any
import logging
from dataclasses import dataclass
from enum import Enum
import random

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("SafetyAgentic.SyntheticGenerator")

class SecteurActivite(Enum):
    """Secteurs d'activit√© bas√©s donn√©es CNESST"""
    CONSTRUCTION = "CONSTRUCTION"
    SOINS_SANTE = "SOINS_SANTE"
    FABRICATION = "FABRICATION"
    TRANSPORT = "TRANSPORT"
    SERVICES = "SERVICES"
    AUTRE = "AUTRE"

class TypeIncident(Enum):
    """Types d'incidents bas√©s donn√©es CNESST"""
    CHUTE_HAUTEUR = "CHUTE_DE_HAUTEUR"
    CHUTE_NIVEAU = "CHUTE_AU_MEME_NIVEAU"
    FRAPPE_OBJET = "FRAPPE_PAR_UN_OBJET"
    EFFORT_EXCESSIF = "EFFORT_EXCESSIF"
    CONTACT_OBJET = "CONTACT_AVEC_OBJET"
    AUTRE = "AUTRE"

@dataclass
class ProfileSecteur:
    """Profil statistique d'un secteur bas√© donn√©es CNESST"""
    nom: str
    variables_base: Dict[str, float]
    dangers_typiques: List[str]
    epi_obligatoires: List[str]
    entreprises_type: List[str]
    incidents_frequents: List[str]
    facteurs_risque: Dict[str, float]

class GenerateurDonneesSynthetiques:
    """
    G√©n√©rateur de donn√©es synth√©tiques d'observations terrain A2
    Bas√© sur les statistiques r√©elles des 793K incidents CNESST
    """
    
    def __init__(self, seed: Optional[int] = None):
        """Initialisation du g√©n√©rateur"""
        if seed:
            np.random.seed(seed)
            random.seed(seed)
        
        self.seed = seed
        self.profiles_secteurs = self._init_profiles_secteurs()
        self.distributions_qualite = self._init_distributions_qualite()
        
        logger.info("üî¨ G√©n√©rateur donn√©es synth√©tiques initialis√©")
    
    def _init_profiles_secteurs(self) -> Dict[SecteurActivite, ProfileSecteur]:
        """Initialisation profils secteurs bas√©s statistiques CNESST"""
        
        return {
            SecteurActivite.CONSTRUCTION: ProfileSecteur(
                nom="Construction",
                variables_base={
                    "usage_epi": 6.2,
                    "respect_procedures": 5.8,
                    "formation_securite": 6.5,
                    "supervision_directe": 5.5,
                    "communication_risques": 6.0,
                    "leadership_sst": 5.9
                },
                dangers_typiques=["hauteur", "chute_materiel", "machines_construction", "electrique"],
                epi_obligatoires=["casque", "chaussures_securite", "gants", "harnais"],
                entreprises_type=[
                    "B√¢timents XYZ Lt√©e", "Construction ABC Inc.", "R√©novations Pro",
                    "Toiture Expert", "Ma√ßonnerie Plus", "√âlectricit√© Moderne"
                ],
                incidents_frequents=["chute_hauteur", "frappe_objet", "contact_electrique"],
                facteurs_risque={"hauteur": 0.8, "machines": 0.6, "materiel_lourd": 0.7}
            ),
            
            SecteurActivite.FABRICATION: ProfileSecteur(
                nom="Fabrication",
                variables_base={
                    "usage_epi": 7.1,
                    "respect_procedures": 6.8,
                    "formation_securite": 7.2,
                    "supervision_directe": 6.5,
                    "communication_risques": 6.9,
                    "leadership_sst": 6.7
                },
                dangers_typiques=["machines", "produits_chimiques", "bruit", "ergonomie"],
                epi_obligatoires=["lunettes", "gants", "protection_auditive", "chaussures_securite"],
                entreprises_type=[
                    "Usine M√©tal Plus", "Fabrication Qu√©bec", "Plastiques Industriels",
                    "Textiles Modernes", "Alimentaire Pro", "Chimie Avanc√©e"
                ],
                incidents_frequents=["contact_machine", "exposition_chimique", "effort_excessif"],
                facteurs_risque={"machines": 0.9, "chimique": 0.7, "bruit": 0.6}
            ),
            
            SecteurActivite.SOINS_SANTE: ProfileSecteur(
                nom="Soins de sant√©",
                variables_base={
                    "usage_epi": 8.2,
                    "respect_procedures": 8.0,
                    "formation_securite": 8.5,
                    "supervision_directe": 7.8,
                    "communication_risques": 8.1,
                    "leadership_sst": 7.9
                },
                dangers_typiques=["biologique", "ergonomie", "stress", "violence"],
                epi_obligatoires=["gants", "masques", "blouses", "lunettes"],
                entreprises_type=[
                    "H√¥pital G√©n√©ral", "CLSC Ville", "Clinique Sant√©+",
                    "CHSLD R√©sidence", "Laboratoire Bio", "Pharmacie Plus"
                ],
                incidents_frequents=["effort_excessif", "exposition_biologique", "stress"],
                facteurs_risque={"biologique": 0.8, "ergonomie": 0.9, "stress": 0.7}
            ),
            
            SecteurActivite.TRANSPORT: ProfileSecteur(
                nom="Transport",
                variables_base={
                    "usage_epi": 6.8,
                    "respect_procedures": 6.2,
                    "formation_securite": 6.9,
                    "supervision_directe": 5.8,
                    "communication_risques": 6.3,
                    "leadership_sst": 6.1
                },
                dangers_typiques=["vehicules", "manutention", "fatigue", "routes"],
                epi_obligatoires=["casque", "gilet_haute_visibilite", "chaussures_securite", "gants"],
                entreprises_type=[
                    "Transport Qu√©bec", "Livraisons Express", "Autobus Metro",
                    "Camionnage Pro", "Logistics Plus", "D√©m√©nagement Rapide"
                ],
                incidents_frequents=["effort_excessif", "contact_vehicule", "chute_niveau"],
                facteurs_risque={"vehicules": 0.8, "manutention": 0.7, "fatigue": 0.6}
            ),
            
            SecteurActivite.SERVICES: ProfileSecteur(
                nom="Services",
                variables_base={
                    "usage_epi": 6.5,
                    "respect_procedures": 6.8,
                    "formation_securite": 7.0,
                    "supervision_directe": 6.9,
                    "communication_risques": 7.2,
                    "leadership_sst": 7.1
                },
                dangers_typiques=["ergonomie", "stress", "glissades", "bureautique"],
                epi_obligatoires=["chaussures_antiderapantes", "support_ergonomique"],
                entreprises_type=[
                    "Services Ville", "Bureau Conseil", "Nettoyage Pro",
                    "S√©curit√© Plus", "Informatique Inc", "Restaurant Central"
                ],
                incidents_frequents=["chute_niveau", "effort_excessif", "stress"],
                facteurs_risque={"ergonomie": 0.7, "stress": 0.8, "glissades": 0.5}
            ),
            
            SecteurActivite.AUTRE: ProfileSecteur(
                nom="Autre",
                variables_base={
                    "usage_epi": 6.0,
                    "respect_procedures": 6.0,
                    "formation_securite": 6.2,
                    "supervision_directe": 6.0,
                    "communication_risques": 6.1,
                    "leadership_sst": 6.0
                },
                dangers_typiques=["divers", "ergonomie", "stress"],
                epi_obligatoires=["gants", "chaussures_securite"],
                entreprises_type=[
                    "Entreprise G√©n√©rale", "Services Divers", "Multi-Secteurs Inc"
                ],
                incidents_frequents=["effort_excessif", "chute_niveau"],
                facteurs_risque={"divers": 0.5}
            )
        }
    
    def _init_distributions_qualite(self) -> Dict[str, Dict]:
        """Distributions qualit√© culture selon secteur"""
        return {
            "excellente": {
                "multiplicateur": 1.4,
                "variance": 0.2,
                "conformite_base": 85
            },
            "bonne": {
                "multiplicateur": 1.2,
                "variance": 0.3,
                "conformite_base": 70
            },
            "moyenne": {
                "multiplicateur": 1.0,
                "variance": 0.4,
                "conformite_base": 55
            },
            "faible": {
                "multiplicateur": 0.7,
                "variance": 0.6,
                "conformite_base": 35
            }
        }
    
    def generate_observation_synthetique(
        self,
        secteur: Optional[SecteurActivite] = None,
        type_incident: Optional[TypeIncident] = None,
        qualite_culture: Optional[str] = None,
        nb_travailleurs: Optional[int] = None,
        duree_observation: Optional[float] = None
    ) -> Dict[str, Any]:
        """
        G√©n√®re une observation terrain synth√©tique
        
        Args:
            secteur: Secteur d'activit√© (al√©atoire si None)
            type_incident: Type incident analys√© (al√©atoire si None)
            qualite_culture: Qualit√© culture ("excellente", "bonne", "moyenne", "faible")
            nb_travailleurs: Nombre de travailleurs observ√©s
            duree_observation: Dur√©e observation en heures
            
        Returns:
            Dict avec observation synth√©tique compl√®te
        """
        
        # S√©lection al√©atoire des param√®tres manquants
        if secteur is None:
            secteur = np.random.choice(list(SecteurActivite))
        
        if type_incident is None:
            type_incident = np.random.choice(list(TypeIncident))
        
        if qualite_culture is None:
            qualite_culture = np.random.choice(
                ["excellente", "bonne", "moyenne", "faible"],
                p=[0.15, 0.35, 0.35, 0.15]  # Distribution r√©aliste
            )
        
        if nb_travailleurs is None:
            nb_travailleurs = np.random.randint(2, 12)
        
        if duree_observation is None:
            duree_observation = np.random.uniform(0.5, 4.0)
        
        # R√©cup√©ration profil secteur
        profil = self.profiles_secteurs[secteur]
        distribution = self.distributions_qualite[qualite_culture]
        
        # G√©n√©ration variables culture avec ajustement qualit√©
        variables_culture = {}
        for var, score_base in profil.variables_base.items():
            # Application multiplicateur qualit√© culture
            score_ajuste = score_base * distribution["multiplicateur"]
            
            # Ajout variance r√©aliste
            variance = distribution["variance"]
            score_final = np.random.normal(score_ajuste, variance)
            
            # Contrainte 1-10
            score_final = max(1, min(10, score_final))
            variables_culture[var] = int(round(score_final))
        
        # S√©lection entreprise du secteur
        entreprises_secteur = profil.entreprises_type
        if entreprises_secteur:  # CORRECTION: V√©rification liste non vide
            entreprise = np.random.choice(entreprises_secteur)
        else:
            entreprise = f"Entreprise {secteur.value}"
        
        # G√©n√©ration dangers d√©tect√©s
        dangers_detectes = self._generer_dangers(profil, qualite_culture)
        
        # G√©n√©ration conformit√© EPI
        conformite_epi = self._generer_conformite_epi(profil, distribution, nb_travailleurs)
        
        # Contexte observation
        contexte = {
            "secteur_activite": secteur.value,
            "type_incident_base": type_incident.value,
            "nb_travailleurs_observes": nb_travailleurs,
            "duree_observation": duree_observation,
            "conditions_meteo": np.random.choice(["ensoleille", "nuageux", "pluvieux"], p=[0.5, 0.3, 0.2]),
            "periode_jour": np.random.choice(["matin", "apres_midi", "soir"], p=[0.4, 0.5, 0.1]),
            "entreprise": entreprise
        }
        
        # M√©ta-information g√©n√©ration
        meta_generation = {
            "seed_utilise": self.seed,
            "timestamp_generation": datetime.now().isoformat(),
            "qualite_culture_cible": qualite_culture,
            "secteur_base": secteur.value,
            "type_incident_base": type_incident.value,
            "distribution_appliquee": distribution
        }
        
        return {
            "variables_culture": variables_culture,
            "conformite": conformite_epi,
            "contexte": contexte,
            "meta_generation": meta_generation
        }
    
    def _generer_dangers(self, profil: ProfileSecteur, qualite_culture: str) -> List[str]:
        """G√©n√®re les dangers d√©tect√©s selon profil secteur et qualit√© culture"""
        
        # Nombre dangers selon qualit√© culture
        if qualite_culture == "excellente":
            nb_dangers = np.random.randint(0, 2)
        elif qualite_culture == "bonne":
            nb_dangers = np.random.randint(1, 3)
        elif qualite_culture == "moyenne":
            nb_dangers = np.random.randint(2, 4)
        else:  # faible
            nb_dangers = np.random.randint(3, 6)
        
        # S√©lection al√©atoire des dangers du secteur
        dangers_disponibles = profil.dangers_typiques
        if nb_dangers >= len(dangers_disponibles):
            return dangers_disponibles
        else:
            return list(np.random.choice(dangers_disponibles, nb_dangers, replace=False))
    
    def _generer_conformite_epi(
        self, 
        profil: ProfileSecteur, 
        distribution: Dict, 
        nb_travailleurs: int
    ) -> Dict[str, Any]:
        """G√©n√®re donn√©es conformit√© EPI"""
        
        epi_types = profil.epi_obligatoires
        conformite_base = distribution["conformite_base"]
        
        # Nombre EPI analys√©s (peut √™tre < nb_travailleurs si pas tous observ√©s)
        epi_analyses = min(nb_travailleurs, np.random.randint(1, nb_travailleurs + 1))
        
        # Calcul conformes selon qualit√© culture
        taux_conformite = conformite_base + np.random.normal(0, 10)
        taux_conformite = max(0, min(100, taux_conformite)) / 100
        
        epi_conformes = int(epi_analyses * taux_conformite)
        
        return {
            "epi_types": epi_types,
            "epi_analyses": epi_analyses,
            "epi_conformes": epi_conformes,
            "taux_conformite": epi_conformes / max(epi_analyses, 1) * 100,
            "dangers": self._generer_dangers(profil, 
                self._get_qualite_from_conformite(taux_conformite * 100))
        }
    
    def _get_qualite_from_conformite(self, taux: float) -> str:
        """D√©termine qualit√© culture selon taux conformit√©"""
        if taux >= 80:
            return "excellente"
        elif taux >= 65:
            return "bonne"
        elif taux >= 45:
            return "moyenne"
        else:
            return "faible"
    
    def generer_batch_observations(
        self,
        nombre: int,
        secteur_filtre: Optional[SecteurActivite] = None,
        qualite_distribution: Optional[Dict[str, float]] = None
    ) -> List[Dict[str, Any]]:
        """
        G√©n√®re un batch d'observations synth√©tiques
        
        Args:
            nombre: Nombre d'observations √† g√©n√©rer
            secteur_filtre: Secteur sp√©cifique (None = tous secteurs)
            qualite_distribution: Distribution qualit√© personnalis√©e
        
        Returns:
            Liste d'observations synth√©tiques
        """
        
        logger.info(f"üîÑ G√©n√©ration {nombre} observations synth√©tiques...")
        
        if qualite_distribution is None:
            qualite_distribution = {
                "excellente": 0.15,
                "bonne": 0.35,
                "moyenne": 0.35,
                "faible": 0.15
            }
        
        observations = []
        
        for i in range(nombre):
            # S√©lection qualit√© selon distribution
            qualite = np.random.choice(
                list(qualite_distribution.keys()),
                p=list(qualite_distribution.values())
            )
            
            # G√©n√©ration observation
            obs = self.generate_observation_synthetique(
                secteur=secteur_filtre,
                qualite_culture=qualite
            )
            
            # Ajout ID unique
            obs["id_observation"] = f"SYNTH_{datetime.now().strftime('%Y%m%d')}_{i+1:04d}"
            
            observations.append(obs)
        
        logger.info(f"‚úÖ {nombre} observations g√©n√©r√©es")
        return observations
    
    def analyser_statistiques_batch(self, observations: List[Dict]) -> Dict[str, Any]:
        """Analyse statistiques d'un batch d'observations"""
        
        if not observations:
            return {"erreur": "Aucune observation √† analyser"}
        
        # Extraction donn√©es
        secteurs = [obs["contexte"]["secteur_activite"] for obs in observations]
        qualites = [obs["meta_generation"]["qualite_culture_cible"] for obs in observations]
        
        variables_moyennes = {}
        all_variables = observations[0]["variables_culture"].keys()
        
        for var in all_variables:
            scores = [obs["variables_culture"][var] for obs in observations]
            variables_moyennes[var] = {
                "moyenne": np.mean(scores),
                "mediane": np.median(scores),
                "ecart_type": np.std(scores),
                "min": np.min(scores),
                "max": np.max(scores)
            }
        
        return {
            "nombre_observations": len(observations),
            "distribution_secteurs": {s: secteurs.count(s) for s in set(secteurs)},
            "distribution_qualites": {q: qualites.count(q) for q in set(qualites)},
            "variables_statistiques": variables_moyennes,
            "score_culture_moyen": np.mean([
                np.mean(list(obs["variables_culture"].values())) 
                for obs in observations
            ]),
            "conformite_epi_moyenne": np.mean([
                obs["conformite"]["taux_conformite"] 
                for obs in observations
            ])
        }


def demo_generateur():
    """D√©monstration du g√©n√©rateur synth√©tique"""
    
    print("üî¨ D√âMONSTRATION G√âN√âRATEUR DONN√âES SYNTH√âTIQUES")
    print("=" * 55)
    
    # Initialisation g√©n√©rateur
    generateur = GenerateurDonneesSynthetiques(seed=42)
    
    # 1. G√©n√©ration observation unique
    print("\n1Ô∏è‚É£ G√âN√âRATION OBSERVATION UNIQUE")
    print("-" * 35)
    
    obs_unique = generateur.generate_observation_synthetique(
        secteur=SecteurActivite.CONSTRUCTION,
        qualite_culture="moyenne"
    )
    
    print(f"Secteur: {obs_unique['contexte']['secteur_activite']}")
    print(f"Entreprise: {obs_unique['contexte']['entreprise']}")
    print(f"Score culture moyen: {np.mean(list(obs_unique['variables_culture'].values())):.1f}/10")
    print(f"Conformit√© EPI: {obs_unique['conformite']['epi_conformes']}/{obs_unique['conformite']['epi_analyses']}")
    print(f"Dangers d√©tect√©s: {obs_unique['conformite']['dangers']}")
    
    # 2. G√©n√©ration batch
    print("\n2Ô∏è‚É£ G√âN√âRATION BATCH (20 OBSERVATIONS)")
    print("-" * 40)
    
    batch_obs = generateur.generer_batch_observations(20)
    stats = generateur.analyser_statistiques_batch(batch_obs)
    
    print(f"üìä Observations g√©n√©r√©es: {stats['nombre_observations']}")
    print(f"üè¢ Secteurs: {list(stats['distribution_secteurs'].keys())}")
    print(f"üìà Score culture moyen: {stats['score_culture_moyen']:.1f}/10")
    print(f"üõ°Ô∏è Conformit√© EPI moyenne: {stats['conformite_epi_moyenne']:.1f}%")
    
    # 3. Test par secteur
    print("\n3Ô∏è‚É£ TEST PAR SECTEUR")
    print("-" * 20)
    
    for secteur in [SecteurActivite.CONSTRUCTION, SecteurActivite.SOINS_SANTE, SecteurActivite.FABRICATION]:
        obs_secteur = generateur.generate_observation_synthetique(
            secteur=secteur,
            qualite_culture="bonne"
        )
        score_moyen = np.mean(list(obs_secteur['variables_culture'].values()))
        print(f"üè¢ {secteur.value}: {score_moyen:.1f}/10 culture, {len(obs_secteur['conformite']['dangers'])} dangers")
    
    # 4. Test qualit√©s culture
    print("\n4Ô∏è‚É£ TEST QUALIT√âS CULTURE")
    print("-" * 25)
    
    for qualite in ["excellente", "bonne", "moyenne", "faible"]:
        obs_qualite = generateur.generate_observation_synthetique(
            secteur=SecteurActivite.CONSTRUCTION,
            qualite_culture=qualite
        )
        score_moyen = np.mean(list(obs_qualite['variables_culture'].values()))
        conformite = obs_qualite['conformite']['taux_conformite']
        print(f"üéØ {qualite.upper()}: {score_moyen:.1f}/10 culture, {conformite:.1f}% conformit√©")
    
    print(f"\n‚úÖ D√âMONSTRATION TERMIN√âE")
    print(f"üî¨ G√©n√©rateur valid√© avec seed {generateur.seed}")
    
    return batch_obs

if __name__ == "__main__":
    observations_demo = demo_generateur()