"""
SafetyGraph BehaviorX - Version Enrichie CNESST
==============================================

Version enrichie de app_behaviorx.py avec int√©gration compl√®te CNESST
incluant d√©tection automatique secteurs SCIAN, benchmarking temps r√©el,
et recommandations evidence-based.

Auteur: Mario Genest - GenAISafety
Date: 11 juillet 2025
Version: 2.0 Enrichie CNESST

INSTRUCTIONS D'UTILISATION:
1. Remplacer votre app_behaviorx.py existant par ce fichier
2. Conserver backup: app_behaviorx_BACKUP.py
3. Lancer: streamlit run app_behaviorx.py --server.port 8501
4. Tester d√©tection avec input "construction b√©ton"
"""

import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import sqlite3
import logging
from typing import Dict, List, Any, Optional
import traceback
import time

# Configuration Streamlit
st.set_page_config(
    page_title="SafetyGraph BehaviorX - Enrichi CNESST",
    page_icon="üõ°Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Configuration logging
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# ===================================================================
# MODULE M1: IMPORTS ENRICHIS CNESST
# ===================================================================

print("üîÑ [M1] Chargement enrichissements CNESST...")

try:
    # Import conditionnel modules enrichissement
    from src.enrichments.behaviorx_enrichments import (
        CNESSTContextEnhancer,
        EnhancedContextAgent,
        EnhancedRecommendationGenerator
    )
    CNESST_ENHANCED = True
    print("‚úÖ [M1] Enrichissements CNESST charg√©s avec succ√®s")
    
except ImportError as e:
    CNESST_ENHANCED = False
    print(f"‚ö†Ô∏è [M1] Enrichissements CNESST non disponibles - Mode d√©grad√©")

except Exception as e:
    CNESST_ENHANCED = False
    print(f"‚ùå [M1] Erreur chargement - {str(e)}")

# Variables globales enrichissement
if CNESST_ENHANCED:
    try:
        cnesst_enhancer = CNESSTContextEnhancer()
        enhanced_context_agent = EnhancedContextAgent()
        enhanced_recommendations = EnhancedRecommendationGenerator()
        print(f"üéØ [M1] Agents enrichis initialis√©s - {len(cnesst_enhancer.scian_sectors)} secteurs SCIAN")
    except Exception as e:
        print(f"‚ö†Ô∏è [M1] Erreur initialisation agents - {str(e)}")
        CNESST_ENHANCED = False
else:
    cnesst_enhancer = None
    enhanced_context_agent = None
    enhanced_recommendations = None

# ===================================================================
# CSS ET STYLES
# ===================================================================

st.markdown("""
<style>
    .main-header {
        background: linear-gradient(90deg, #1f4e79 0%, #2980b9 100%);
        color: white;
        padding: 1.5rem;
        border-radius: 10px;
        margin-bottom: 2rem;
        text-align: center;
        box-shadow: 0 4px 6px rgba(0,0,0,0.1);
    }
    
    .metric-card {
        background: white;
        padding: 1rem;
        border-radius: 8px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
        border-left: 4px solid #2980b9;
        margin-bottom: 1rem;
    }
    
    .workflow-step {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #27ae60;
        margin: 1rem 0;
    }
    
    .cnesst-enhancement {
        background: linear-gradient(90deg, #27ae60 0%, #2ecc71 100%);
        color: white;
        padding: 1rem;
        border-radius: 8px;
        margin: 1rem 0;
    }
    
    .recommendation-priority {
        background: #fee;
        border: 1px solid #fcc;
        padding: 0.8rem;
        border-radius: 6px;
        margin: 0.5rem 0;
    }
    
    .recommendation-medium {
        background: #fff3cd;
        border: 1px solid #ffeaa7;
        padding: 0.8rem;
        border-radius: 6px;
        margin: 0.5rem 0;
    }
    
    .recommendation-info {
        background: #d1ecf1;
        border: 1px solid #bee5eb;
        padding: 0.8rem;
        border-radius: 6px;
        margin: 0.5rem 0;
    }
</style>
""", unsafe_allow_html=True)

# ===================================================================
# CLASSE PRINCIPALE SAFETYGRAPH BEHAVIORX
# ===================================================================

class SafetyGraphBehaviorX:
    """Classe principale SafetyGraph BehaviorX enrichie CNESST"""
    
    def __init__(self):
        self.initialize_session_state()
        self.load_culture_dimensions()
        self.initialize_databases()
        
    def initialize_session_state(self):
        """Initialisation √©tat session Streamlit"""
        
        # √âtats de base
        if 'analysis_complete' not in st.session_state:
            st.session_state.analysis_complete = False
        
        if 'current_step' not in st.session_state:
            st.session_state.current_step = 'input'
        
        if 'user_responses' not in st.session_state:
            st.session_state.user_responses = {}
        
        if 'analysis_results' not in st.session_state:
            st.session_state.analysis_results = {}
        
        # NOUVEAU: √âtats enrichissement CNESST
        if 'cnesst_context' not in st.session_state:
            st.session_state.cnesst_context = {}
        
        if 'sector_benchmarks' not in st.session_state:
            st.session_state.sector_benchmarks = {}
    
    def load_culture_dimensions(self):
        """Chargement dimensions culture SST"""
        
        self.culture_dimensions = {
            "leadership": {
                "name": "Leadership et Engagement",
                "description": "Engagement visible de la direction",
                "questions": [
                    "La direction d√©montre-t-elle un engagement visible envers la s√©curit√©?",
                    "Les ressources n√©cessaires sont-elles allou√©es √† la s√©curit√©?",
                    "Les leaders participent-ils activement aux activit√©s s√©curit√©?"
                ]
            },
            "participation": {
                "name": "Participation des Employ√©s",
                "description": "Implication active des employ√©s",
                "questions": [
                    "Les employ√©s participent-ils activement aux d√©cisions s√©curit√©?",
                    "Y a-t-il des comit√©s de s√©curit√© fonctionnels?",
                    "Les suggestions d'am√©lioration sont-elles encourag√©es?"
                ]
            },
            "communication": {
                "name": "Communication",
                "description": "√âchange d'informations s√©curit√©",
                "questions": [
                    "La communication s√©curit√© est-elle claire et r√©guli√®re?",
                    "Les incidents sont-ils communiqu√©s efficacement?",
                    "Y a-t-il des canaux de communication ouverts?"
                ]
            },
            "competence": {
                "name": "Comp√©tence et Formation",
                "description": "D√©veloppement des comp√©tences",
                "questions": [
                    "Les formations s√©curit√© sont-elles ad√©quates?",
                    "Les comp√©tences sont-elles √©valu√©es r√©guli√®rement?",
                    "Y a-t-il un plan de d√©veloppement des comp√©tences?"
                ]
            },
            "accountability": {
                "name": "Responsabilisation",
                "description": "Responsabilit√©s clairement d√©finies",
                "questions": [
                    "Les responsabilit√©s s√©curit√© sont-elles claires?",
                    "Y a-t-il des m√©canismes de reddition de comptes?",
                    "Les √©carts sont-ils adress√©s promptement?"
                ]
            },
            "learning": {
                "name": "Apprentissage Organisationnel",
                "description": "Capacit√© d'apprentissage continu",
                "questions": [
                    "L'organisation apprend-elle de ses erreurs?",
                    "Y a-t-il une analyse syst√©matique des incidents?",
                    "Les bonnes pratiques sont-elles partag√©es?"
                ]
            },
            "environment": {
                "name": "Environnement de Travail",
                "description": "Conditions de travail s√©curitaires",
                "questions": [
                    "L'environnement de travail est-il s√©curitaire?",
                    "Les √©quipements de protection sont-ils disponibles?",
                    "Les proc√©dures sont-elles appliqu√©es?"
                ]
            }
        }
    
    def initialize_databases(self):
        """Initialisation bases de donn√©es"""
        
        # Base de donn√©es comportementales
        try:
            self.behavioral_db = "data/safetyagentic_behaviorx.db"
            # Cr√©ation si n'existe pas
            conn = sqlite3.connect(self.behavioral_db)
            conn.close()
        except Exception as e:
            logger.warning(f"Erreur initialisation DB: {e}")

# ===================================================================
# MODULE M2: D√âTECTION SCIAN ET WIDGETS
# ===================================================================

def process_user_input_with_scian_detection(user_input):
    """[M2] Traitement input avec d√©tection SCIAN automatique"""
    
    if not CNESST_ENHANCED:
        return {"scian_detected": None, "enrichment": None, "status": "non_available"}
    
    try:
        # D√©tection secteur SCIAN
        detected_scian = cnesst_enhancer.detect_scian_from_input(user_input)
        
        if detected_scian:
            # Message d√©tection
            sector_name = cnesst_enhancer.sector_mappings.get(detected_scian, f"Secteur {detected_scian}")
            st.success(f"‚ú® Secteur SCIAN d√©tect√©: **{detected_scian}** - {sector_name}")
            
            # R√©cup√©ration enrichissement
            sector_enrichment = cnesst_enhancer.get_sector_enrichment(detected_scian)
            
            if sector_enrichment.get("available", False):
                # Widget m√©triques secteur
                display_cnesst_metrics_widget(sector_enrichment)
                
                return {
                    "scian_detected": detected_scian,
                    "enrichment": sector_enrichment,
                    "status": "enriched"
                }
            else:
                st.warning(f"‚ö†Ô∏è Secteur {detected_scian} d√©tect√© - donn√©es en cours d'int√©gration")
                return {
                    "scian_detected": detected_scian,
                    "enrichment": None,
                    "status": "detected_no_data"
                }
        else:
            return {
                "scian_detected": None,
                "enrichment": None,
                "status": "no_detection"
            }
    
    except Exception as e:
        st.error(f"‚ùå [M2] Erreur d√©tection SCIAN: {str(e)}")
        return {"scian_detected": None, "enrichment": None, "status": "error"}

def display_cnesst_metrics_widget(sector_enrichment):
    """[M2] Widget affichage m√©triques CNESST"""
    
    try:
        benchmarks = sector_enrichment["benchmarks"]
        
        # Header attractif
        st.markdown(f"""
        <div class="cnesst-enhancement">
            <h3>üìä Benchmarks Secteur CNESST</h3>
            <p>Donn√©es statistiques officielles pour comparaison avec votre organisation</p>
        </div>
        """, unsafe_allow_html=True)
        
        # M√©triques principales
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "üìà Total Jours Absence",
                f"{benchmarks['total_absence_days']:,}",
                help="Nombre total jours d'absence dans ce secteur"
            )
        
        with col2:
            st.metric(
                "üè• Total L√©sions",
                f"{benchmarks['total_injuries']:,}",
                help="Nombre total de l√©sions d√©clar√©es"
            )
        
        with col3:
            st.metric(
                "‚è±Ô∏è Moyenne/L√©sion",
                f"{benchmarks['average_absence']}j",
                help="Dur√©e moyenne d'absence par l√©sion"
            )
        
        with col4:
            st.metric(
                "üéØ Indice Gravit√©",
                f"{benchmarks.get('severity_index', 100):.1f}",
                help="Indice de gravit√© sectorielle"
            )
        
        # Risques dominants
        if "risk_profile" in sector_enrichment:
            st.subheader("‚ö†Ô∏è Risques Dominants Secteur")
            
            risk_profile = sector_enrichment["risk_profile"]
            
            # Graphique risques
            risk_df = pd.DataFrame([
                {"Risque": k.replace("_", " ").title(), "Pourcentage": v}
                for k, v in risk_profile.items()
            ])
            
            fig = px.bar(risk_df, x="Risque", y="Pourcentage", 
                        title="Distribution des Risques - Secteur CNESST")
            st.plotly_chart(fig, use_container_width=True)
            
            # Top 3 risques
            sorted_risks = sorted(risk_profile.items(), key=lambda x: x[1], reverse=True)[:3]
            
            st.write("**üéØ Top 3 Risques Sectoriels:**")
            for i, (risk, percentage) in enumerate(sorted_risks, 1):
                st.write(f"**{i}. {risk.replace('_', ' ').title()}**: {percentage}%")
        
        # Actions prioritaires
        if "prevention_priorities" in sector_enrichment:
            st.subheader("üí° Actions Prioritaires Secteur")
            priorities = sector_enrichment["prevention_priorities"]
            for i, action in enumerate(priorities[:4], 1):
                st.write(f"‚úÖ **{i}.** {action}")
    
    except Exception as e:
        st.error(f"[M2] Erreur affichage m√©triques: {str(e)}")

# ===================================================================
# FONCTIONS WORKFLOW VCS‚ÜíABC
# ===================================================================

def display_workflow_header():
    """Header principal SafetyGraph"""
    
    st.markdown("""
    <div class="main-header">
        <h1>üõ°Ô∏è SafetyGraph BehaviorX - Enrichi CNESST</h1>
        <p>Analyse Culture S√©curit√© avec Enrichissement Automatique Secteurs SCIAN</p>
        <p><strong>Version 2.0</strong> | Mario Genest - GenAISafety | Juillet 2025</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Statut enrichissement
    if CNESST_ENHANCED:
        st.success(f"‚ú® Enrichissements CNESST activ√©s - {len(cnesst_enhancer.scian_sectors)} secteurs disponibles")
    else:
        st.info("üìù Mode standard - Enrichissements CNESST non disponibles")

def collect_user_input():
    """Collecte input utilisateur avec d√©tection SCIAN"""
    
    st.subheader("üîç Analyse Culture S√©curit√©")
    
    # Input principal
    st.write("**D√©crivez votre organisation et le contexte d'analyse :**")
    user_input = st.text_area(
        "Contexte analyse",
        placeholder="Ex: Analyser culture s√©curit√© √©quipe construction b√©ton projet r√©sidentiel...",
        height=100,
        help="Mentionnez le secteur d'activit√© pour activer l'enrichissement CNESST automatique"
    )
    
    if user_input:
        # NOUVEAU: D√©tection SCIAN automatique
        cnesst_context = process_user_input_with_scian_detection(user_input)
        st.session_state.cnesst_context = cnesst_context
        st.session_state.user_input = user_input
        
        return True
    
    return False

def culture_assessment_workflow():
    """Workflow principal √©valuation culture SST"""
    
    # Initialisation SafetyGraph
    safety_graph = SafetyGraphBehaviorX()
    
    st.subheader("üìã √âvaluation Culture SST - 7 Dimensions")
    
    # Collecte r√©ponses par dimension
    responses = {}
    
    for dim_key, dimension in safety_graph.culture_dimensions.items():
        
        with st.expander(f"üìä {dimension['name']}", expanded=False):
            st.write(f"*{dimension['description']}*")
            
            dim_responses = []
            
            for i, question in enumerate(dimension['questions']):
                response = st.slider(
                    question,
                    min_value=1, max_value=10, value=5,
                    key=f"{dim_key}_{i}",
                    help="1 = Tr√®s faible, 10 = Excellent"
                )
                dim_responses.append(response)
            
            responses[dim_key] = {
                "scores": dim_responses,
                "average": np.mean(dim_responses),
                "name": dimension['name']
            }
    
    # Bouton analyse
    if st.button("üöÄ Lancer Analyse Culture SST", type="primary"):
        with st.spinner("Analyse en cours..."):
            time.sleep(2)  # Simulation traitement
            
            # Stockage r√©sultats
            st.session_state.culture_responses = responses
            st.session_state.analysis_complete = True
            
            # Calcul score global
            global_score = np.mean([dim['average'] for dim in responses.values()])
            st.session_state.global_score = global_score
        
        st.success("‚úÖ Analyse termin√©e!")
        st.rerun()

def display_analysis_results():
    """Affichage r√©sultats analyse avec enrichissement CNESST"""
    
    if not st.session_state.analysis_complete:
        return
    
    st.subheader("üìà R√©sultats Analyse Culture SST")
    
    # Score global
    global_score = st.session_state.global_score
    responses = st.session_state.culture_responses
    
    # M√©triques principales
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("üéØ Score Global", f"{global_score:.1f}/10")
    
    with col2:
        status = "Excellent" if global_score >= 8 else "Bon" if global_score >= 6 else "√Ä am√©liorer"
        st.metric("üìä Statut", status)
    
    with col3:
        st.metric("üìã Dimensions √âvalu√©es", len(responses))
    
    with col4:
        # Comparaison secteur si disponible
        cnesst_context = st.session_state.get('cnesst_context', {})
        if cnesst_context.get('status') == 'enriched':
            # Simulation comparaison vs secteur
            sector_avg = 6.8  # Simulation moyenne sectorielle
            diff = global_score - sector_avg
            st.metric("üè≠ vs Secteur", f"{diff:+.1f}", f"Moyenne secteur: {sector_avg}")
        else:
            st.metric("üìä Analyse", "Standard")
    
    # Graphique radar dimensions
    display_culture_radar_chart(responses)
    
    # Analyse d√©taill√©e par dimension
    display_dimension_analysis(responses)

def display_culture_radar_chart(responses):
    """Graphique radar culture SST"""
    
    # Pr√©paration donn√©es
    dimensions = list(responses.keys())
    scores = [responses[dim]['average'] for dim in dimensions]
    names = [responses[dim]['name'] for dim in dimensions]
    
    # Graphique radar
    fig = go.Figure()
    
    fig.add_trace(go.Scatterpolar(
        r=scores,
        theta=names,
        fill='toself',
        name='Score Culture SST',
        line_color='#2980b9'
    ))
    
    # Ajout ligne secteur si disponible
    cnesst_context = st.session_state.get('cnesst_context', {})
    if cnesst_context.get('status') == 'enriched':
        # Simulation scores sectoriels
        sector_scores = [6.8, 6.5, 7.1, 6.9, 6.3, 7.0, 6.7]  # Simulation
        
        fig.add_trace(go.Scatterpolar(
            r=sector_scores,
            theta=names,
            fill='toself',
            name='Moyenne Secteur CNESST',
            line_color='#e74c3c',
            opacity=0.6
        ))
    
    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[0, 10]
            )),
        showlegend=True,
        title="Profil Culture S√©curit√© - 7 Dimensions"
    )
    
    st.plotly_chart(fig, use_container_width=True)

def display_dimension_analysis(responses):
    """Analyse d√©taill√©e par dimension"""
    
    st.subheader("üîç Analyse D√©taill√©e par Dimension")
    
    # Tri dimensions par score
    sorted_dims = sorted(responses.items(), key=lambda x: x[1]['average'], reverse=True)
    
    # Top 3 et Bottom 3
    col1, col2 = st.columns(2)
    
    with col1:
        st.write("**‚úÖ Points Forts (Top 3):**")
        for i, (dim_key, dim_data) in enumerate(sorted_dims[:3], 1):
            st.write(f"{i}. **{dim_data['name']}**: {dim_data['average']:.1f}/10")
    
    with col2:
        st.write("**‚ö†Ô∏è Points d'Am√©lioration (Bottom 3):**")
        for i, (dim_key, dim_data) in enumerate(sorted_dims[-3:], 1):
            st.write(f"{i}. **{dim_data['name']}**: {dim_data['average']:.1f}/10")
    
    # Graphique d√©taill√©
    dim_names = [dim_data['name'] for _, dim_data in sorted_dims]
    dim_scores = [dim_data['average'] for _, dim_data in sorted_dims]
    
    fig = px.bar(
        x=dim_scores, 
        y=dim_names,
        orientation='h',
        title="Scores par Dimension Culture SST",
        color=dim_scores,
        color_continuous_scale="RdYlGn"
    )
    
    fig.update_layout(height=400)
    st.plotly_chart(fig, use_container_width=True)

# ===================================================================
# MODULE M4: RECOMMANDATIONS ENRICHIES
# ===================================================================

def generate_recommendations():
    """G√©n√©ration recommandations avec enrichissement CNESST"""
    
    if not st.session_state.analysis_complete:
        return
    
    # Recommandations de base
    responses = st.session_state.culture_responses
    global_score = st.session_state.global_score
    
    base_recommendations = []
    
    # Recommandations selon score global
    if global_score < 6:
        base_recommendations.extend([
            "D√©velopper un plan d'am√©lioration culture s√©curit√© global",
            "Renforcer l'engagement de la direction",
            "Am√©liorer la communication s√©curit√©"
        ])
    elif global_score < 8:
        base_recommendations.extend([
            "Consolider les acquis culture s√©curit√©",
            "Cibler les dimensions les plus faibles",
            "D√©velopper programme formation continue"
        ])
    else:
        base_recommendations.extend([
            "Maintenir l'excellence culture s√©curit√©",
            "Partager bonnes pratiques",
            "Devenir organisation apprenante"
        ])
    
    # Recommandations par dimension faible
    sorted_dims = sorted(responses.items(), key=lambda x: x[1]['average'])
    
    for dim_key, dim_data in sorted_dims[:2]:  # 2 plus faibles
        if dim_data['average'] < 7:
            base_recommendations.append(f"Am√©liorer {dim_data['name']}: Formation sp√©cialis√©e")
    
    # NOUVEAU: Enrichissement CNESST
    enhanced_recs = enhance_recommendations_with_cnesst(base_recommendations)
    
    # Affichage recommandations enrichies
    display_enhanced_recommendations(enhanced_recs)

def enhance_recommendations_with_cnesst(existing_recommendations):
    """[M4] Enrichissement recommandations avec contexte CNESST"""
    
    if not CNESST_ENHANCED:
        return existing_recommendations
    
    # R√©cup√©ration contexte CNESST
    cnesst_context = st.session_state.get('cnesst_context', {})
    
    if not cnesst_context.get("scian_detected"):
        return existing_recommendations
    
    try:
        enhanced_recs = []
        
        # Recommandations existantes d'abord
        for i, rec in enumerate(existing_recommendations):
            enhanced_recs.append({
                "id": f"base_{i}",
                "title": rec,
                "source": "Analyse Culture SafetyGraph",
                "type": "base",
                "priority": "standard"
            })
        
        # Recommandations sectorielles CNESST
        scian_code = cnesst_context["scian_detected"]
        enrichment = cnesst_context.get("enrichment")
        
        if enrichment and enrichment.get("available"):
            sector_recs = generate_cnesst_sector_recommendations(scian_code, enrichment)
            enhanced_recs.extend(sector_recs)
        
        return enhanced_recs
        
    except Exception as e:
        st.warning(f"‚ö†Ô∏è [M4] Erreur enrichissement: {str(e)}")
        return existing_recommendations

def generate_cnesst_sector_recommendations(scian_code, enrichment):
    """[M4] G√©n√©ration recommandations sectorielles CNESST"""
    
    sector_recs = []
    
    try:
        risk_profile = enrichment.get("risk_profile", {})
        prevention_priorities = enrichment.get("prevention_priorities", [])
        benchmarks = enrichment["benchmarks"]
        
        # Recommandation risque dominant
        if risk_profile:
            top_risk = max(risk_profile.items(), key=lambda x: x[1])
            risk_name, risk_percentage = top_risk
            
            sector_recs.append({
                "id": f"cnesst_risk_{scian_code}",
                "title": f"üî¥ Prioriser Pr√©vention {risk_name.replace('_', ' ').title()}",
                "description": f"Risque dominant secteur {scian_code} ({risk_percentage}% incidents)",
                "source": "Statistiques CNESST sectorielles",
                "type": "cnesst_priority",
                "priority": "haute",
                "evidence": f"Base: {benchmarks['total_injuries']:,} incidents analys√©s",
                "sector_context": scian_code
            })
        
        # Actions prioritaires sectorielles
        for i, action in enumerate(prevention_priorities[:2], 1):
            sector_recs.append({
                "id": f"cnesst_action_{scian_code}_{i}",
                "title": f"üü° {action}",
                "description": f"Action prioritaire secteur {enrichment['sector_name']}",
                "source": "Bonnes pratiques CNESST",
                "type": "cnesst_action",
                "priority": "moyenne",
                "sector_context": scian_code
            })
        
        # Benchmark information
        sector_recs.append({
            "id": f"cnesst_benchmark_{scian_code}",
            "title": "üìä Benchmarking Sectoriel Disponible",
            "description": f"Comparaison vs {benchmarks['total_injuries']:,} incidents secteur",
            "source": "Base CNESST officielle",
            "type": "cnesst_info",
            "priority": "info",
            "details": {
                "avg_absence": benchmarks['average_absence'],
                "sector_name": enrichment['sector_name']
            }
        })
        
        return sector_recs
        
    except Exception as e:
        st.error(f"[M4] Erreur g√©n√©ration recommandations sectorielles: {str(e)}")
        return []

def display_enhanced_recommendations(enhanced_recs):
    """[M4] Affichage recommandations enrichies"""
    
    if not enhanced_recs:
        st.info("Aucune recommandation disponible")
        return
    
    st.subheader("üí° Recommandations Personnalis√©es")
    
    # S√©paration par type
    base_recs = [r for r in enhanced_recs if r.get("type") == "base"]
    cnesst_recs = [r for r in enhanced_recs if r.get("type", "").startswith("cnesst")]
    
    # Recommandations de base
    if base_recs:
        st.markdown("#### üîß Recommandations Analyse Culture SST")
        for i, rec in enumerate(base_recs, 1):
            st.write(f"{i}. {rec['title']}")
    
    # Recommandations CNESST enrichies
    if cnesst_recs:
        st.markdown("#### ‚ú® Recommandations Enrichies CNESST")
        
        for rec in cnesst_recs:
            if rec.get("type") == "cnesst_priority":
                st.markdown(f"""
                <div class="recommendation-priority">
                    <h4>{rec['title']}</h4>
                    <p><strong>Evidence:</strong> {rec['evidence']}</p>
                    <p><em>Source: {rec['source']}</em></p>
                </div>
                """, unsafe_allow_html=True)
            
            elif rec.get("type") == "cnesst_action":
                st.markdown(f"""
                <div class="recommendation-medium">
                    <h4>{rec['title']}</h4>
                    <p>{rec['description']}</p>
                    <p><em>Source: {rec['source']}</em></p>
                </div>
                """, unsafe_allow_html=True)
            
            elif rec.get("type") == "cnesst_info":
                st.markdown(f"""
                <div class="recommendation-info">
                    <h4>{rec['title']}</h4>
                    <p>{rec['description']}</p>
                    <p><em>Source: {rec['source']}</em></p>
                </div>
                """, unsafe_allow_html=True)

# ===================================================================
# MODULE M3: DASHBOARD EXPERT
# ===================================================================

def add_expert_dashboard_link():
    """[M3] Lien vers dashboard expert SafetyGraph"""
    
    st.markdown("---")
    st.markdown("### üéØ Administration Expert SafetyGraph")
    
    # Description module expert
    st.markdown("""
    <div style="background: #f8f9fa; padding: 1rem; border-radius: 8px; border-left: 4px solid #3498db;">
        <h4>üöÄ Dashboard Expert CNESST</h4>
        <p><strong>Fonctionnalit√©s avanc√©es:</strong></p>
        <ul>
            <li>üìä Administration 104 agents SafetyGraph</li>
            <li>üìà Analytics secteurs SCIAN d√©taill√©s</li>
            <li>‚ö° Monitoring performance pipeline</li>
            <li>üíæ Gestion sources donn√©es CNESST</li>
            <li>‚öôÔ∏è Configuration syst√®me avanc√©e</li>
        </ul>
    </div>
    """, unsafe_allow_html=True)
    
    # Bouton acc√®s
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        if st.button("üéØ Ouvrir Dashboard Expert", use_container_width=True, type="primary"):
            st.success("üöÄ Instructions dashboard expert:")
            
            st.code("""
# Nouveau terminal PowerShell:
cd "C:\\Users\\Mario\\Documents\\PROJECTS_NEW\\SafeGraph"
streamlit run app_cnesst_dashboard.py --server.port 8502

# Puis acc√©der: http://localhost:8502
            """, language="bash")
    
    # Statut modules
    st.markdown("---")
    st.subheader("üìä Statut Syst√®me SafetyGraph")
    
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("üè† Module Principal", "‚úÖ Actif", "Port 8501")
    
    with col2:
        if CNESST_ENHANCED:
            st.metric("‚ú® Enrichissements", "‚úÖ Disponibles", f"{len(cnesst_enhancer.scian_sectors)} secteurs")
        else:
            st.metric("‚ú® Enrichissements", "‚ö†Ô∏è Non disponibles", "Mode standard")
    
    with col3:
        st.metric("üéØ Dashboard Expert", "‚è∏Ô∏è √Ä d√©marrer", "Port 8502")

# ===================================================================
# FONCTIONS UTILITAIRES
# ===================================================================

def display_system_info():
    """Informations syst√®me SafetyGraph"""
    
    with st.expander("‚ÑπÔ∏è Informations Syst√®me SafetyGraph"):
        
        col1, col2 = st.columns(2)
        
        with col1:
            st.write("**üèóÔ∏è Architecture:**")
            st.write("‚Ä¢ Module Principal Enrichi (Port 8501)")
            st.write("‚Ä¢ Dashboard Expert (Port 8502)")
            st.write("‚Ä¢ Communication inter-modules")
            
            st.write("**üìä Donn√©es:**")
            if CNESST_ENHANCED:
                st.write(f"‚Ä¢ {len(cnesst_enhancer.scian_sectors)} secteurs SCIAN")
                st.write("‚Ä¢ Benchmarks CNESST int√©gr√©s")
                st.write("‚Ä¢ D√©tection automatique secteurs")
            else:
                st.write("‚Ä¢ Mode standard activ√©")
                st.write("‚Ä¢ Enrichissements non disponibles")
        
        with col2:
            st.write("**ü§ñ Fonctionnalit√©s:**")
            st.write("‚Ä¢ Analyse culture SST 7 dimensions")
            st.write("‚Ä¢ D√©tection automatique secteur SCIAN")
            st.write("‚Ä¢ Benchmarking temps r√©el vs secteur")
            st.write("‚Ä¢ Recommandations evidence-based")
            
            st.write("**‚ö° Performance:**")
            st.write("‚Ä¢ Analyses rapides <5s")
            st.write("‚Ä¢ Interface responsive")
            st.write("‚Ä¢ Graphiques interactifs")

def run_system_tests():
    """Tests syst√®me SafetyGraph"""
    
    st.subheader("üß™ Tests Syst√®me SafetyGraph")
    
    if st.button("‚ñ∂Ô∏è Lancer Tests"):
        
        # Test M1 - Imports
        st.write("**Test M1 - Imports:**")
        st.write(f"‚úÖ CNESST_ENHANCED: {CNESST_ENHANCED}")
        
        if CNESST_ENHANCED:
            st.write(f"‚úÖ Secteurs SCIAN disponibles: {len(cnesst_enhancer.scian_sectors)}")
        else:
            st.write("‚ö†Ô∏è Mode d√©grad√© - enrichissements non disponibles")
        
        # Test M2 - D√©tection SCIAN
        st.write("**Test M2 - D√©tection SCIAN:**")
        if CNESST_ENHANCED:
            test_inputs = ["construction b√©ton", "h√¥pital sant√©", "transport camion"]
            for test_input in test_inputs:
                detected = cnesst_enhancer.detect_scian_from_input(test_input)
                st.write(f"‚Ä¢ '{test_input}' ‚Üí {detected if detected else 'Non d√©tect√©'}")
        else:
            st.write("‚ö†Ô∏è Tests ignor√©s - enrichissements non disponibles")
        
        # Test M3 - Dashboard
        st.write("**Test M3 - Dashboard Expert:**")
        st.write("‚úÖ Fonction add_expert_dashboard_link disponible")
        
        # Test M4 - Recommandations
        st.write("**Test M4 - Recommandations:**")
        st.write("‚úÖ Fonction enhance_recommendations_with_cnesst disponible")
        
        st.success("üéâ Tests syst√®me termin√©s!")

# ===================================================================
# FONCTION PRINCIPALE
# ===================================================================

def main():
    """Fonction principale SafetyGraph BehaviorX enrichie"""
    
    # Header principal
    display_workflow_header()
    
    # Navigation principale
    st.sidebar.title("üõ°Ô∏è SafetyGraph Navigation")
    
    page = st.sidebar.selectbox(
        "Choisir analyse:",
        [
            "üè† Accueil",
            "üîç Analyse Culture SST", 
            "üìä R√©sultats & Recommandations",
            "üß™ Tests Syst√®me",
            "‚ÑπÔ∏è Informations"
        ]
    )
    
    # Affichage selon page
    if page == "üè† Accueil":
        st.markdown("## üè† Accueil SafetyGraph")
        
        st.markdown("""
        ### üéØ Bienvenue dans SafetyGraph BehaviorX Enrichi
        
        **Version 2.0 avec int√©gration CNESST compl√®te**
        
        #### üöÄ Fonctionnalit√©s:
        - **Analyse Culture SST** 7 dimensions compl√®te
        - **D√©tection automatique secteur SCIAN** depuis votre description
        - **Benchmarking temps r√©el** vs statistiques sectorielles CNESST
        - **Recommandations evidence-based** avec sources scientifiques
        - **Dashboard expert** administration 104 agents (module s√©par√©)
        
        #### üìä Comment utiliser:
        1. **Commencer analyse** ‚Üí Onglet "Analyse Culture SST"
        2. **D√©crire votre organisation** ‚Üí Mentionner secteur pour d√©tection automatique
        3. **Compl√©ter √©valuation** ‚Üí 7 dimensions culture s√©curit√©
        4. **Consulter r√©sultats** ‚Üí Benchmarks et recommandations enrichies
        
        #### ‚ú® Nouveaut√©s Version 2.0:
        - D√©tection automatique secteur SCIAN depuis description
        - Benchmarking temps r√©el avec donn√©es CNESST officielles
        - Recommandations personnalis√©es selon secteur d'activit√©
        - Interface enrichie avec m√©triques sectorielles
        """)
        
        # Statut syst√®me
        if CNESST_ENHANCED:
            st.success(f"‚úÖ Enrichissements CNESST activ√©s - {len(cnesst_enhancer.scian_sectors)} secteurs support√©s")
        else:
            st.warning("‚ö†Ô∏è Enrichissements CNESST non disponibles - Mode standard activ√©")
    
    elif page == "üîç Analyse Culture SST":
        
        # Collecte input utilisateur
        if collect_user_input():
            st.markdown("---")
            
            # Workflow √©valuation culture
            culture_assessment_workflow()
    
    elif page == "üìä R√©sultats & Recommandations":
        
        if st.session_state.analysis_complete:
            # Affichage r√©sultats
            display_analysis_results()
            
            st.markdown("---")
            
            # G√©n√©ration recommandations
            generate_recommendations()
            
        else:
            st.info("üìù Veuillez d'abord compl√©ter l'analyse culture SST")
            
            if st.button("‚Ü©Ô∏è Retour √† l'analyse"):
                st.switch_page("üîç Analyse Culture SST")
    
    elif page == "üß™ Tests Syst√®me":
        run_system_tests()
    
    elif page == "‚ÑπÔ∏è Informations":
        display_system_info()
    
    # Module M3: Lien dashboard expert (toujours affich√©)
    add_expert_dashboard_link()

# ===================================================================
# POINT D'ENTR√âE APPLICATION
# ===================================================================

if __name__ == "__main__":
    try:
        main()
        
        # Messages syst√®me en bas
        st.markdown("---")
        st.markdown("""
        <div style="text-align: center; color: #666; font-size: 0.9rem;">
            üõ°Ô∏è SafetyGraph BehaviorX v2.0 Enrichi CNESST | 
            üë§ Mario Genest - GenAISafety | 
            üìÖ Juillet 2025 | 
            ‚ö° D√©tection Automatique Secteurs SCIAN
        </div>
        """, unsafe_allow_html=True)
        
    except Exception as e:
        st.error(f"‚ùå Erreur application: {str(e)}")
        st.write("**Traceback:**")
        st.code(traceback.format_exc())
        
        if st.button("üîÑ Red√©marrer Application"):
            st.rerun()