# Test Simple G√©n√©rateur Synth√©tique - SafetyAgentic
# ==================================================
# Test du g√©n√©rateur sans d√©pendances externes

import sys
import os

# Ajout chemin pour imports
sys.path.append(os.path.join('src', 'agents', 'collecte'))

try:
    from generateur_donnees_synthetiques import (
        GenerateurDonneesSynthetiques, 
        SecteurActivite, 
        TypeIncident
    )
    print("‚úÖ Import g√©n√©rateur r√©ussi")
except ImportError as e:
    print(f"‚ùå Erreur import g√©n√©rateur: {e}")
    sys.exit(1)

def test_generateur_simple():
    """Test simple du g√©n√©rateur synth√©tique"""
    
    print("\nüß™ TEST SIMPLE G√âN√âRATEUR SYNTH√âTIQUE")
    print("=" * 45)
    
    # Initialisation
    generateur = GenerateurDonneesSynthetiques(seed=42)
    print("ü§ñ G√©n√©rateur initialis√©")
    
    # Test 1: Observation unique
    print("\n1Ô∏è‚É£ TEST OBSERVATION UNIQUE")
    print("-" * 30)
    
    obs = generateur.generate_observation_synthetique(
        secteur=SecteurActivite.CONSTRUCTION,
        qualite_culture="moyenne"
    )
    
    print(f"‚úÖ Observation g√©n√©r√©e:")
    print(f"   Secteur: {obs['contexte']['secteur_activite']}")
    print(f"   Entreprise: {obs['contexte']['entreprise']}")
    print(f"   Score culture: {sum(obs['variables_culture'].values()) / len(obs['variables_culture']):.1f}/10")
    print(f"   Variables: {list(obs['variables_culture'].keys())}")
    print(f"   EPI analys√©s: {obs['conformite']['epi_analyses']}")
    print(f"   Dangers: {len(obs['conformite']['dangers'])}")
    
    # Test 2: Batch observations
    print("\n2Ô∏è‚É£ TEST BATCH OBSERVATIONS")
    print("-" * 30)
    
    batch = generateur.generer_batch_observations(5)
    print(f"‚úÖ Batch g√©n√©r√©: {len(batch)} observations")
    
    # Analyse batch
    stats = generateur.analyser_statistiques_batch(batch)
    print(f"   Score culture moyen: {stats['score_culture_moyen']:.1f}/10")
    print(f"   Conformit√© EPI moyenne: {stats['conformite_epi_moyenne']:.1f}%")
    print(f"   Secteurs: {list(stats['distribution_secteurs'].keys())}")
    
    # Test 3: Diff√©rents secteurs
    print("\n3Ô∏è‚É£ TEST TOUS SECTEURS")
    print("-" * 25)
    
    for secteur in SecteurActivite:
        obs_secteur = generateur.generate_observation_synthetique(
            secteur=secteur,
            qualite_culture="bonne"
        )
        score = sum(obs_secteur['variables_culture'].values()) / len(obs_secteur['variables_culture'])
        dangers = len(obs_secteur['conformite']['dangers'])
        print(f"   üè¢ {secteur.value}: {score:.1f}/10, {dangers} dangers")
    
    # Test 4: Qualit√©s culture
    print("\n4Ô∏è‚É£ TEST QUALIT√âS CULTURE")
    print("-" * 25)
    
    for qualite in ["excellente", "bonne", "moyenne", "faible"]:
        obs_qualite = generateur.generate_observation_synthetique(
            secteur=SecteurActivite.FABRICATION,
            qualite_culture=qualite
        )
        score = sum(obs_qualite['variables_culture'].values()) / len(obs_qualite['variables_culture'])
        conformite = obs_qualite['conformite']['taux_conformite']
        print(f"   üéØ {qualite.upper()}: {score:.1f}/10, {conformite:.1f}% conformit√©")
    
    print(f"\nüéâ TOUS LES TESTS R√âUSSIS !")
    print("=" * 45)
    print("‚úÖ G√©n√©rateur synth√©tique fonctionnel")
    print("üî¨ Bas√© sur statistiques CNESST 793K incidents")
    print("‚ö° Pr√™t pour int√©gration SafetyAgentic")
    
    return True

def demo_agent_a2_simulation():
    """Simulation Agent A2 avec g√©n√©rateur"""
    
    print("\nü§ñ SIMULATION AGENT A2 AVEC G√âN√âRATEUR")
    print("=" * 45)
    
    generateur = GenerateurDonneesSynthetiques(seed=42)
    
    # Simulation donn√©es incident CNESST
    incident_data = {
        "ID": 123456,
        "SECTEUR_SCIAN": "CONSTRUCTION",
        "GENRE": "CHUTE DE HAUTEUR",
        "NATURE_LESION": "FRACTURE",
        "SIEGE_LESION": "JAMBE"
    }
    
    # G√©n√©ration observation A2 synth√©tique
    obs_a2 = generateur.generate_observation_synthetique(
        secteur=SecteurActivite.CONSTRUCTION,
        qualite_culture="moyenne"
    )
    
    # Formatage r√©sultat style Agent A2
    variables_culture_terrain = {}
    for var, score in obs_a2['variables_culture'].items():
        variables_culture_terrain[var] = {
            "score": score,
            "source": "observation_synthetique",
            "observations": obs_a2['contexte']['nb_travailleurs_observes']
        }
    
    conformite = obs_a2['conformite']
    conformite_epi_pct = conformite['taux_conformite']
    
    result_a2 = {
        "agent_id": "A2_SYNTHETIC",
        "confidence_score": 0.75,
        "variables_culture_terrain": variables_culture_terrain,
        "observations": {
            "score_comportement": int(sum(obs_a2['variables_culture'].values()) / len(obs_a2['variables_culture']) * 10),
            "dangers_detectes": len(conformite['dangers']),
            "epi_analyses": conformite['epi_analyses'],
            "epi_obligatoires": len(conformite['epi_types']),
            "conformite_procedures": conformite_epi_pct,
            "incidents_potentiels": 1 if conformite_epi_pct < 50 else 0
        },
        "contexte_observation": {
            "duree_observation": f"{obs_a2['contexte']['duree_observation']:.1f} heures",
            "nombre_travailleurs": obs_a2['contexte']['nb_travailleurs_observes'],
            "type_source": "donnees_synthetiques_cnesst",
            "conditions_meteo": obs_a2['contexte']['conditions_meteo']
        },
        "data_source": "synthetic",
        "synthetic_details": {
            "secteur_base": obs_a2['contexte']['secteur_activite'],
            "qualite_culture_cible": obs_a2['meta_generation']['qualite_culture_cible'],
            "seed_utilise": obs_a2['meta_generation']['seed_utilise']
        }
    }
    
    print(f"‚úÖ R√âSULTAT AGENT A2 SIMUL√â:")
    print(f"   üîç Source: {result_a2['data_source']}")
    print(f"   üìä Score comportement: {result_a2['observations']['score_comportement']}/100")
    print(f"   ‚ö†Ô∏è Dangers d√©tect√©s: {result_a2['observations']['dangers_detectes']}")
    print(f"   üõ°Ô∏è Conformit√©: {result_a2['observations']['conformite_procedures']:.1f}%")
    print(f"   üë• Travailleurs observ√©s: {result_a2['contexte_observation']['nombre_travailleurs']}")
    print(f"   ‚è±Ô∏è Dur√©e: {result_a2['contexte_observation']['duree_observation']}")
    print(f"   ‚úÖ Confiance: {result_a2['confidence_score']:.2f}")
    
    print(f"\nüéØ VARIABLES CULTURE TERRAIN:")
    for var, data in result_a2['variables_culture_terrain'].items():
        print(f"   ‚Ä¢ {var}: {data['score']}/10")
    
    print(f"\nüî¨ D√âTAILS SYNTH√âTIQUES:")
    details = result_a2['synthetic_details']
    print(f"   ‚Ä¢ Secteur base: {details['secteur_base']}")
    print(f"   ‚Ä¢ Qualit√© culture: {details['qualite_culture_cible']}")
    print(f"   ‚Ä¢ Seed: {details['seed_utilise']}")
    
    return result_a2

if __name__ == "__main__":
    print("üöÄ LANCEMENT TEST G√âN√âRATEUR SYNTH√âTIQUE")
    print("=" * 50)
    
    try:
        # Test g√©n√©rateur de base
        test_generateur_simple()
        
        # Simulation Agent A2
        demo_agent_a2_simulation()
        
        print(f"\nüéâ VALIDATION COMPL√àTE R√âUSSIE !")
        print("=" * 40)
        print("‚úÖ G√©n√©rateur synth√©tique op√©rationnel")
        print("ü§ñ Agent A2 simulation fonctionnelle") 
        print("üî¨ Pr√™t pour SafetyAgentic complet")
        
    except Exception as e:
        print(f"\n‚ùå ERREUR: {e}")
        print("üîß V√©rifiez la structure des fichiers")