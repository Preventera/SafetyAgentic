# SafetyAgentic - Agent A2 BehaviorX CORRIG√â - Observations ABC + VCS
# ===================================================================
# Version corrig√©e des erreurs de noms de m√©thodes et structure

import sys
import os
import asyncio
import json
from datetime import datetime
from typing import Dict, List, Optional, Any, Tuple
from dataclasses import dataclass, field
import logging
import random

# Configuration logging SafetyAgentic
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger("SafetyAgentic.A2.BehaviorX")

@dataclass
class ObservationABC:
    """Structure observation mod√®le ABC BehaviorX"""
    
    antecedent: Dict = field(default_factory=dict)
    comportement: Dict = field(default_factory=dict)
    consequence: Dict = field(default_factory=dict)
    score_abc: float = 0.0
    criticit√©: str = "MOYEN"
    recommandations: List[str] = field(default_factory=list)
    timestamp: datetime = field(default_factory=datetime.now)

@dataclass
class VCSData:
    """Donn√©es Visite Comportementale S√©curit√©"""
    
    observateur: str = ""
    zone_observ√©e: str = ""
    t√¢che_observ√©e: str = ""
    comportements_observ√©s: List[Dict] = field(default_factory=list)
    conversations_s√©curit√©: List[Dict] = field(default_factory=list)
    actions_correctives: List[Dict] = field(default_factory=list)
    score_vcs: float = 0.0
    dur√©e_observation: int = 0  # minutes

class ModuleBehaviorXObservations:
    """Module BehaviorX pour observations terrain - VERSION CORRIG√âE"""
    
    def __init__(self):
        self.modes_observation = [
            "ABC_Standard", "ABC_Critique", "VCS_Comportementale", 
            "VCS_Conversation", "Checklist_Adaptative", "Observation_Continue"
        ]
        logger.info("üîç Module BehaviorX Observations initialis√©")
    
    def observation_abc_standard(self, donn√©es_terrain: Dict) -> ObservationABC:
        """Observation standard mod√®le ABC BehaviorX"""
        logger.info("üîÑ Observation ABC Standard activ√©e")
        
        observation = ObservationABC()
        
        # Analyse des ant√©c√©dents
        observation.antecedent = self._analyser_antecedents_terrain(donn√©es_terrain)
        
        # Analyse des comportements observ√©s
        observation.comportement = self._analyser_comportements_terrain(donn√©es_terrain)
        
        # Analyse des cons√©quences
        observation.consequence = self._analyser_consequences_terrain(donn√©es_terrain)
        
        # Calcul score ABC global
        observation.score_abc = self._calculer_score_abc_global(observation)
        
        # D√©termination criticit√©
        observation.criticit√© = self._determiner_criticite(observation.score_abc)
        
        # G√©n√©ration recommandations
        observation.recommandations = self._generer_recommandations_abc(observation)
        
        logger.info(f"‚úÖ Observation ABC termin√©e - Score: {observation.score_abc:.2f}")
        return observation
    
    def visite_comportementale_securite(self, donn√©es_vcs: Dict) -> VCSData:
        """Visite Comportementale S√©curit√© BehaviorX - CORRIG√âE"""
        logger.info("üîÑ VCS BehaviorX activ√©e")
        
        vcs = VCSData()
        vcs.observateur = donn√©es_vcs.get("observateur", "Agent_A2")
        vcs.zone_observ√©e = donn√©es_vcs.get("zone", "Zone_Non_Sp√©cifi√©e")
        vcs.t√¢che_observ√©e = donn√©es_vcs.get("t√¢che", "T√¢che_Standard")
        
        # Analyse comportements observ√©s
        vcs.comportements_observ√©s = self._analyser_comportements_vcs(donn√©es_vcs)
        
        # Conversations s√©curit√© - NOM CORRIG√â
        vcs.conversations_s√©curit√© = self._conduire_conversations_securite(donn√©es_vcs)
        
        # Actions correctives identifi√©es
        vcs.actions_correctives = self._identifier_actions_correctives(vcs.comportements_observ√©s)
        
        # Score VCS global
        vcs.score_vcs = self._calculer_score_vcs(vcs)
        
        # Dur√©e observation
        vcs.dur√©e_observation = donn√©es_vcs.get("dur√©e", 15)
        
        logger.info(f"‚úÖ VCS termin√©e - Score: {vcs.score_vcs:.2f}, Zone: {vcs.zone_observ√©e}")
        return vcs
    
    # M√©thodes internes d'analyse - CORRIG√âES
    
    def _analyser_antecedents_terrain(self, donn√©es: Dict) -> Dict:
        """Analyse ant√©c√©dents terrain pour mod√®le ABC"""
        antecedents = donn√©es.get("antecedents", [])
        
        # Classification ant√©c√©dents
        antecedents_organisationnels = [a for a in antecedents if any(
            terme in str(a).lower() for terme in ["formation", "proc√©dure", "politique"]
        )]
        antecedents_techniques = [a for a in antecedents if any(
            terme in str(a).lower() for terme in ["√©quipement", "machine", "outil"]
        )]
        antecedents_humains = [a for a in antecedents if any(
            terme in str(a).lower() for terme in ["fatigue", "stress", "exp√©rience"]
        )]
        
        score_antecedents = min(10, max(1, 8 - len(antecedents_techniques) * 0.5))
        
        return {
            "organisationnels": antecedents_organisationnels,
            "techniques": antecedents_techniques,
            "humains": antecedents_humains,
            "score": score_antecedents,
            "criticit√©_antecedents": "√âLEV√âE" if score_antecedents < 5 else "MOD√âR√âE"
        }
    
    def _analyser_comportements_terrain(self, donn√©es: Dict) -> Dict:
        """Analyse comportements observ√©s terrain"""
        comportements = donn√©es.get("comportements_observ√©s", [])
        
        # Classification comportements
        comportements_s√ªrs = [c for c in comportements if any(
            terme in str(c).lower() for terme in ["epi", "s√©curitaire", "proc√©dure", "v√©rification"]
        )]
        comportements_risque = [c for c in comportements if any(
            terme in str(c).lower() for terme in ["risque", "danger", "n√©gligence", "contournement"]
        )]
        
        # Score comportements
        score_base = 7.0
        if comportements_s√ªrs:
            score_base += len(comportements_s√ªrs) * 0.5
        if comportements_risque:
            score_base -= len(comportements_risque) * 1.0
        
        score_comportements = max(1, min(10, score_base))
        
        return {
            "comportements_s√ªrs": comportements_s√ªrs,
            "comportements_risque": comportements_risque,
            "ratio_s√©curit√©": len(comportements_s√ªrs) / max(1, len(comportements)),
            "score": score_comportements,
            "tendance": "POSITIVE" if len(comportements_s√ªrs) > len(comportements_risque) else "N√âGATIVE"
        }
    
    def _analyser_consequences_terrain(self, donn√©es: Dict) -> Dict:
        """Analyse cons√©quences observ√©es/potentielles"""
        consequences = donn√©es.get("consequences_observ√©es", [])
        consequences_potentielles = donn√©es.get("consequences_potentielles", [])
        
        # Analyse gravit√©
        consequences_graves = [c for c in consequences + consequences_potentielles if any(
            terme in str(c).lower() for terme in ["grave", "mortel", "invalidit√©", "arr√™t"]
        )]
        
        score_consequences = max(1, 9 - len(consequences_graves) * 2)
        
        return {
            "consequences_observ√©es": consequences,
            "consequences_potentielles": consequences_potentielles,
            "consequences_graves": consequences_graves,
            "score": score_consequences,
            "niveau_gravit√©": "CRITIQUE" if len(consequences_graves) > 0 else "MOD√âR√â"
        }
    
    def _calculer_score_abc_global(self, observation: ObservationABC) -> float:
        """Calcul score ABC global"""
        score_a = observation.antecedent.get("score", 5)
        score_b = observation.comportement.get("score", 5)
        score_c = observation.consequence.get("score", 5)
        
        # Pond√©ration ABC BehaviorX : Comportement prioritaire
        return (score_a * 0.25 + score_b * 0.50 + score_c * 0.25)
    
    def _determiner_criticite(self, score_abc: float) -> str:
        """D√©termination criticit√© selon score ABC"""
        if score_abc >= 8:
            return "FAIBLE"
        elif score_abc >= 6:
            return "MOD√âR√âE"
        elif score_abc >= 4:
            return "√âLEV√âE"
        else:
            return "CRITIQUE"
    
    def _generer_recommandations_abc(self, observation: ObservationABC) -> List[str]:
        """G√©n√©ration recommandations bas√©es ABC"""
        recommandations = []
        
        if observation.score_abc < 5:
            recommandations.extend([
                "Intervention imm√©diate requise",
                "Formation comportementale cibl√©e",
                "R√©vision proc√©dures de s√©curit√©"
            ])
        elif observation.score_abc < 7:
            recommandations.extend([
                "Renforcement sensibilisation",
                "Coaching comportemental",
                "Am√©lioration ant√©c√©dents organisationnels"
            ])
        else:
            recommandations.extend([
                "Maintien bonnes pratiques",
                "Partage exemples positifs",
                "Surveillance continue"
            ])
        
        return recommandations
    
    def _analyser_comportements_vcs(self, donn√©es: Dict) -> List[Dict]:
        """Analyse comportements pour VCS"""
        comportements_raw = donn√©es.get("comportements_observ√©s", [])
        
        comportements_analys√©s = []
        for comp in comportements_raw:
            analyse = {
                "comportement": comp,
                "type": self._classifier_type_comportement(comp),
                "risque_associ√©": self._√©valuer_risque_comportement(comp),
                "fr√©quence_observ√©e": random.randint(1, 10),
                "impact_s√©curit√©": self._calculer_impact_s√©curit√©(comp)
            }
            comportements_analys√©s.append(analyse)
        
        return comportements_analys√©s
    
    def _conduire_conversations_securite(self, donn√©es: Dict) -> List[Dict]:
        """Conversations s√©curit√© VCS - NOM CORRIG√â"""
        nb_conversations = donn√©es.get("nb_conversations", 2)
        
        conversations = []
        for i in range(nb_conversations):
            conversation = {
                "participant": f"Employ√©_{i+1}",
                "dur√©e_minutes": random.randint(3, 8),
                "sujets_abord√©s": self._generer_sujets_conversation(),
                "engagement": random.choice(["√âlev√©", "Mod√©r√©", "Faible"]),
                "actions_convenues": self._generer_actions_conversation()
            }
            conversations.append(conversation)
        
        return conversations
    
    def _identifier_actions_correctives(self, comportements: List[Dict]) -> List[Dict]:
        """Identification actions correctives bas√©es comportements"""
        actions = []
        
        for comp in comportements:
            if comp.get("risque_associ√©", 5) >= 7:
                actions.append({
                    "action": f"Correction imm√©diate - {comp.get('comportement', 'N/A')}",
                    "priorit√©": "HAUTE",
                    "d√©lai": "Imm√©diat",
                    "responsable": "Superviseur"
                })
            elif comp.get("risque_associ√©", 5) >= 5:
                actions.append({
                    "action": f"Formation cibl√©e - {comp.get('type', 'N/A')}",
                    "priorit√©": "MOD√âR√âE",
                    "d√©lai": "7 jours",
                    "responsable": "Formation"
                })
        
        return actions
    
    def _calculer_score_vcs(self, vcs: VCSData) -> float:
        """Calcul score VCS global"""
        if not vcs.comportements_observ√©s:
            return 5.0
        
        score_comportements = sum(
            comp.get("impact_s√©curit√©", 5) for comp in vcs.comportements_observ√©s
        ) / len(vcs.comportements_observ√©s)
        
        score_conversations = len(vcs.conversations_s√©curit√©) * 0.5 + 6
        score_actions = min(10, len(vcs.actions_correctives) * 0.3 + 7)
        
        return min(10, (score_comportements * 0.5 + score_conversations * 0.3 + score_actions * 0.2))
    
    # M√©thodes utilitaires
    
    def _classifier_type_comportement(self, comportement: str) -> str:
        """Classification type comportement"""
        if any(terme in comportement.lower() for terme in ["epi", "casque", "gants"]):
            return "√âquipement Protection"
        elif any(terme in comportement.lower() for terme in ["proc√©dure", "consigne"]):
            return "Respect Proc√©dures"
        elif any(terme in comportement.lower() for terme in ["communication", "signal"]):
            return "Communication"
        else:
            return "G√©n√©ral"
    
    def _√©valuer_risque_comportement(self, comportement: str) -> int:
        """√âvaluation risque comportement 1-10"""
        if any(terme in comportement.lower() for terme in ["risque", "danger", "n√©gligence"]):
            return random.randint(7, 10)
        else:
            return random.randint(3, 7)
    
    def _calculer_impact_s√©curit√©(self, comportement: str) -> float:
        """Calcul impact s√©curit√© comportement"""
        if any(terme in comportement.lower() for terme in ["s√ªr", "s√©curitaire", "protection"]):
            return random.uniform(7.0, 9.5)
        else:
            return random.uniform(4.0, 7.0)
    
    def _generer_sujets_conversation(self) -> List[str]:
        """G√©n√©ration sujets conversation s√©curit√©"""
        sujets_possibles = [
            "Port EPI", "Nouvelles proc√©dures", "Retour d'exp√©rience",
            "Am√©lioration continue", "Signalement dangers", "Formation s√©curit√©"
        ]
        return random.sample(sujets_possibles, k=random.randint(2, 4))
    
    def _generer_actions_conversation(self) -> List[str]:
        """G√©n√©ration actions convenues conversation"""
        actions_possibles = [
            "R√©vision formation EPI", "Am√©lioration signalisation",
            "Mise √† jour proc√©dure", "Partage bonnes pratiques"
        ]
        return random.sample(actions_possibles, k=random.randint(1, 3))

class A2CapteurObservationsBehaviorX:
    """Agent A2 Enrichi BehaviorX - VERSION CORRIG√âE"""
    
    def __init__(self):
        self.agent_id = "A2_BehaviorX_Enrichi"
        self.version = "1.0_Phase1_Corrig√©"
        self.behaviorx_module = ModuleBehaviorXObservations()
        self.modes_disponibles = [
            "Mode_1_Conformit√©", "Mode_2_Proc√©dures", "Mode_3_Signalisation",
            "Mode_4_Terrain", "Mode_5_Comportemental", 
            "Mode_6_ABC_BehaviorX", "Mode_7_VCS_BehaviorX"
        ]
        logger.info(f"üîç Agent A2 BehaviorX initialis√© - Version {self.version}")
        logger.info(f"üìã Modes disponibles: {len(self.modes_disponibles)}")
    
    async def process(self, state) -> Dict:
        """Traitement enrichi A2 + BehaviorX - VERSION CORRIG√âE"""
        start_time = datetime.now()
        logger.info("üîÑ D√©marrage traitement Agent A2 BehaviorX Enrichi")
        
        try:
            donn√©es_entr√©e = state.get("donn√©es_entr√©e", {}) if isinstance(state, dict) else state.donn√©es_entr√©e
            
            # Structure r√©sultats COMPL√àTE
            r√©sultats = {
                "agent_id": self.agent_id,
                "timestamp": start_time,
                "modes_utilis√©s": [],
                "observations_abc": [],
                "donn√©es_vcs": [],
                "score_global": 0.0,
                "variables_culture_terrain": [],  # AJOUT√â
                "alertes_temps_r√©el": [],
                "recommandations": [],
                "performance": {}  # AJOUT√â
            }
            
            # Mode 6 : Observation ABC BehaviorX
            if donn√©es_entr√©e.get("mode_abc_actif", True):
                logger.info("üîÑ Mode 6 - Observation ABC BehaviorX")
                observation_abc = self.behaviorx_module.observation_abc_standard(donn√©es_entr√©e)
                r√©sultats["observations_abc"].append({
                    "observation": observation_abc.__dict__,
                    "score_abc": observation_abc.score_abc,
                    "criticit√©": observation_abc.criticit√©
                })
                r√©sultats["modes_utilis√©s"].append("Mode_6_ABC_BehaviorX")
            
            # Mode 7 : VCS BehaviorX
            if donn√©es_entr√©e.get("mode_vcs_actif", True):
                logger.info("üîÑ Mode 7 - VCS BehaviorX")
                vcs_data = self.behaviorx_module.visite_comportementale_securite(donn√©es_entr√©e)
                r√©sultats["donn√©es_vcs"].append({
                    "vcs": vcs_data.__dict__,
                    "score_vcs": vcs_data.score_vcs,
                    "zone": vcs_data.zone_observ√©e
                })
                r√©sultats["modes_utilis√©s"].append("Mode_7_VCS_BehaviorX")
            
            # Calcul score global A2 BehaviorX
            r√©sultats["score_global"] = self._calculer_score_global_a2(r√©sultats)
            
            # Variables culture terrain enrichies
            r√©sultats["variables_culture_terrain"] = self._mapper_variables_culture_terrain(r√©sultats)
            
            # Recommandations globales
            r√©sultats["recommandations"] = self._generer_recommandations_globales(r√©sultats)
            
            # Performance
            temps_traitement = (datetime.now() - start_time).total_seconds()
            r√©sultats["performance"] = {
                "temps_traitement": temps_traitement,
                "modes_actifs": len(r√©sultats["modes_utilis√©s"]),
                "observations_g√©n√©r√©es": len(r√©sultats["observations_abc"]) + len(r√©sultats["donn√©es_vcs"])
            }
            
            logger.info(f"üìä Performance A2 BehaviorX: {temps_traitement:.3f}s, modes: {len(r√©sultats['modes_utilis√©s'])}")
            logger.info(f"‚úÖ Agent A2 BehaviorX termin√© - Score global: {r√©sultats['score_global']:.2f}")
            
            return r√©sultats
            
        except Exception as e:
            logger.error(f"‚ùå Erreur Agent A2 BehaviorX: {str(e)}")
            return {
                "agent_id": self.agent_id,
                "erreur": str(e),
                "score_global": 0.0,
                "modes_utilis√©s": [],
                "variables_culture_terrain": [],  # STRUCTURE MINIMALE
                "recommandations": [],
                "performance": {}
            }
    
    def _calculer_score_global_a2(self, r√©sultats: Dict) -> float:
        """Calcul score global A2 BehaviorX"""
        scores = []
        
        # Score ABC
        if r√©sultats["observations_abc"]:
            score_abc = sum(obs["score_abc"] for obs in r√©sultats["observations_abc"]) / len(r√©sultats["observations_abc"])
            scores.append(score_abc)
        
        # Score VCS
        if r√©sultats["donn√©es_vcs"]:
            score_vcs = sum(vcs["score_vcs"] for vcs in r√©sultats["donn√©es_vcs"]) / len(r√©sultats["donn√©es_vcs"])
            scores.append(score_vcs)
        
        return sum(scores) / len(scores) if scores else 5.0
    
    def _mapper_variables_culture_terrain(self, r√©sultats: Dict) -> List[Dict]:
        """Mapping variables culture terrain enrichies BehaviorX"""
        variables = []
        
        # Variables ABC
        if r√©sultats["observations_abc"]:
            for obs_abc in r√©sultats["observations_abc"]:
                abc_data = obs_abc["observation"]
                variables.extend([
                    {
                        "nom": "Gestion ant√©c√©dents terrain",
                        "valeur": abc_data["antecedent"]["score"],
                        "confiance": 0.90,
                        "source": "BehaviorX_ABC"
                    },
                    {
                        "nom": "Qualit√© comportements observ√©s",
                        "valeur": abc_data["comportement"]["score"],
                        "confiance": 0.95,
                        "source": "BehaviorX_ABC"
                    },
                    {
                        "nom": "√âvaluation cons√©quences",
                        "valeur": abc_data["consequence"]["score"],
                        "confiance": 0.85,
                        "source": "BehaviorX_ABC"
                    }
                ])
        
        # Variables VCS
        if r√©sultats["donn√©es_vcs"]:
            for vcs_data in r√©sultats["donn√©es_vcs"]:
                vcs = vcs_data["vcs"]
                variables.extend([
                    {
                        "nom": "Engagement conversations s√©curit√©",
                        "valeur": len(vcs["conversations_s√©curit√©"]) * 2,
                        "confiance": 0.80,
                        "source": "BehaviorX_VCS"
                    },
                    {
                        "nom": "Efficacit√© actions correctives",
                        "valeur": min(10, len(vcs["actions_correctives"]) * 1.5 + 6),
                        "confiance": 0.85,
                        "source": "BehaviorX_VCS"
                    }
                ])
        
        return variables
    
    def _generer_recommandations_globales(self, r√©sultats: Dict) -> List[str]:
        """G√©n√©ration recommandations globales A2 BehaviorX"""
        recommandations = []
        
        # Recommandations ABC
        if r√©sultats["observations_abc"]:
            for obs in r√©sultats["observations_abc"]:
                if obs["criticit√©"] in ["CRITIQUE", "√âLEV√âE"]:
                    recommandations.append(f"Intervention urgente - Criticit√© {obs['criticit√©']}")
                recommandations.extend(obs["observation"]["recommandations"])
        
        # Recommandations VCS
        if r√©sultats["donn√©es_vcs"]:
            for vcs in r√©sultats["donn√©es_vcs"]:
                actions_correctives = vcs["vcs"]["actions_correctives"]
                for action in actions_correctives:
                    if action["priorit√©"] == "HAUTE":
                        recommandations.append(f"Action prioritaire: {action['action']}")
        
        return list(set(recommandations))  # √âliminer doublons

# Test simplifi√© et robuste
async def test_agent_a2_behaviorx():
    """Test Agent A2 BehaviorX Corrig√©"""
    print("üß™ TEST AGENT A2 BEHAVIORX ENRICHI - VERSION CORRIG√âE")
    print("=" * 60)
    
    # Donn√©es de test simplifi√©es
    donn√©es_test = {
        "donn√©es_entr√©e": {
            "mode_abc_actif": True,
            "mode_vcs_actif": True,
            "zone": "Atelier_M√©tallurgie",
            "observateur": "Superviseur_A",
            "t√¢che": "Usinage pi√®ces m√©talliques",
            "nb_conversations": 3,
            
            # Donn√©es ABC
            "antecedents": [
                "Formation EPI r√©cente",
                "Nouvelle machine install√©e",
                "Proc√©dure mise √† jour"
            ],
            "comportements_observ√©s": [
                "Port syst√©matique casque de s√©curit√©",
                "V√©rification √©quipement avant d√©marrage",
                "Communication dangers √† l'√©quipe",
                "Respect proc√©dure lockout/tagout"
            ],
            "consequences_observ√©es": [
                "Am√©lioration s√©curit√© √©quipe"
            ],
            "consequences_potentielles": [
                "Risque blessure mineur sans EPI"
            ]
        }
    }
    
    # Test agent
    agent = A2CapteurObservationsBehaviorX()
    r√©sultats = await agent.process(donn√©es_test)
    
    # Affichage s√©curis√©
    print(f"\nüìä R√âSULTATS AGENT A2 BEHAVIORX:")
    print(f"=" * 40)
    print(f"‚úÖ Score global: {r√©sultats.get('score_global', 0):.2f}/10")
    print(f"‚úÖ Modes utilis√©s: {len(r√©sultats.get('modes_utilis√©s', []))}")
    print(f"‚úÖ Variables culture terrain: {len(r√©sultats.get('variables_culture_terrain', []))}")
    print(f"‚úÖ Observations ABC: {len(r√©sultats.get('observations_abc', []))}")
    print(f"‚úÖ Donn√©es VCS: {len(r√©sultats.get('donn√©es_vcs', []))}")
    print(f"‚úÖ Recommandations: {len(r√©sultats.get('recommandations', []))}")
    
    # D√©tails modules
    if r√©sultats.get("observations_abc"):
        abc_data = r√©sultats["observations_abc"][0]
        print(f"\nüéØ ABC - Score: {abc_data['score_abc']:.2f}, Criticit√©: {abc_data['criticit√©']}")
    
    if r√©sultats.get("donn√©es_vcs"):
        vcs_data = r√©sultats["donn√©es_vcs"][0]
        print(f"üîç VCS - Score: {vcs_data['score_vcs']:.2f}, Zone: {vcs_data['zone']}")
    
    # Performance
    perf = r√©sultats.get("performance", {})
    print(f"\n‚ö° PERFORMANCE:")
    print(f"üìä Temps: {perf.get('temps_traitement', 0):.3f}s")
    print(f"üîß Modes: {perf.get('modes_actifs', 0)}")
    
    # Variables top 3
    print(f"\nüéØ VARIABLES CULTURE TERRAIN (Top 3):")
    for i, var in enumerate(r√©sultats.get("variables_culture_terrain", [])[:3], 1):
        print(f"  {i}. {var['nom']}: {var['valeur']:.1f}/10")
    
    print(f"\n‚úÖ Test Agent A2 BehaviorX CORRIG√â termin√© avec succ√®s!")
    return r√©sultats

if __name__ == "__main__":
    asyncio.run(test_agent_a2_behaviorx())